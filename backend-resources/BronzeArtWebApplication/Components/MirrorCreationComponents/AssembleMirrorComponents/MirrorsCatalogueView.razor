@page "/MirrorCatalog"
@using BronzeArtWebApplication.Shared.Services
@using MirrorsModelsLibrary.StaticData
@using MirrorsModelsLibrary.Enums
@using BronzeArtWebApplication.Components.Various
@inject ILanguageContainerService lc
@inject AssembleMirrorViewModel vm
@inject BronzeUser user
@inject NavigationManager navigationManager
@inject JSCallService js
@inject MirrorDialogNavigator dialogNav

<StoryContainer IsVisible="@(true)"
                IsTitleBoxVisible="@(true)"
                IsCloseIconVisible="@(true)"
                IsPreviousButtonVisible="@(false)"
                IsResetIconVisible="@(true)"
                IsNextButtonVisible="@(false)"
                OnCloseClick="@(()=> navigationManager.NavigateTo("/AssembleMirror"))"
                OnResetClick="ClearFilters"
                StoryContainerStyle="margin-top:20px!important"
                MainContentStyle="padding:20px;background-color:var(--BackgroundColor);"
                TitleContainerStyle="height:80px!important;border-bottom-width:2px;background: linear-gradient(135deg, #f1f1f1 0%, #e0e0e0 40%, #dedede 60%, #d1d1d1 80%, rgba(103, 0, 60, 0.05) 100%);position:sticky;top:0;z-index:100;backdrop-filter: blur(8px); /* Blurs content behind */-webkit-backdrop-filter: blur(8px); /* For Safari */">
    <TitleContent>
        <div class="page-header my-2 mx-4">
            <div class="d-flex flex-row align-center">
                <h1 class="page-title d-none d-md-flex">@lc.Keys["DialogReadyTitle"]</h1>
                <h1 class="page-title d-sm-flex d-md-none">@lc.Keys["Models"]</h1>
                <MudCheckBox Label="@(lc.Keys["CompleteView"])"
                             Class="ml-5 d-none d-lg-flex"
                             T="bool" Color="@(Color.Primary)"
                             Dense="@(true)"
                             @bind-Value:get="@(showAllSeries)" 
                             @bind-Value:set="@(SetShowAllSeries)" />
            </div>
            <div class="filter-container d-none d-lg-flex">
                @if (showAllSeries || !string.IsNullOrEmpty(SelectedSeriesString))
                {
                    <MudTextField T="string"
                                  Class="search-box"
                                  AdornmentColor="@(Color.Primary)"
                                  Variant="@(Variant.Outlined)"
                                  Label="@(lc.Keys["Search"])"
                                  Placeholder="@lc.Keys["Search"]"
                                  Margin="@(Margin.Dense)"
                                  Adornment="Adornment.Start"
                                  Clearable="@(true)"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  @bind-Value="SearchQuery"
                                  Immediate="true"
                                  DebounceInterval="300" />
                }

                <MudSelect T="@(string)"
                           Variant="@(Variant.Outlined)"
                           Class="filter-select"
                           AdornmentColor="@(Color.Primary)"
                           Style="min-width:260px"
                           Margin="@(Margin.Dense)"
                           Label="@lc.Keys["Shape"]"
                           Clearable="@(true)"
                           @bind-Value="SelectedShapeString"
                           AnchorOrigin="Origin.BottomLeft">
                    @* <MudSelectItem Value="@(string.Empty)"></MudSelectItem> *@
                    <MudSelectItem Value="@(MirrorShape.Rectangular.ToString())">@lc.Keys[MirrorShapeDescKey[MirrorShape.Rectangular]]</MudSelectItem>
                    <MudSelectItem Value="@(MirrorShape.Circular.ToString())">@lc.Keys[MirrorShapeDescKey[MirrorShape.Circular]]</MudSelectItem>
                    <MudSelectItem Value="@(MirrorShape.Capsule.ToString())">@lc.Keys[MirrorShapeDescKey[MirrorShape.Capsule]]</MudSelectItem>
                    <MudSelectItem Value="@(MirrorShape.Ellipse.ToString())">@lc.Keys[MirrorShapeDescKey[MirrorShape.Ellipse]]</MudSelectItem>
                    <MudSelectItem Value="@(MirrorShape.StoneNS.ToString())">@lc.Keys[MirrorShapeDescKey[MirrorShape.StoneNS]]</MudSelectItem>
                    <MudSelectItem Value="@(MirrorShape.PebbleND.ToString())">@lc.Keys[MirrorShapeDescKey[MirrorShape.PebbleND]]</MudSelectItem>
                    <MudSelectItem Value="@(MirrorShape.CircleSegment.ToString())">@lc.Keys[MirrorShapeDescKey[MirrorShape.CircleSegment]]</MudSelectItem>
                    <MudSelectItem Value="@(MirrorShape.CircleSegment2.ToString())">@lc.Keys[MirrorShapeDescKey[MirrorShape.CircleSegment2]]</MudSelectItem>
                </MudSelect>

                <MudSelect T="@(string)"
                           Class="filter-select"
                           Style="min-width:150px"
                           Margin="@(Margin.Dense)"
                           Variant="@(Variant.Outlined)"
                           Label="@lc.Keys["Series"]"
                           AdornmentColor="@(Color.Primary)"
                           Clearable="@(true)"
                           @bind-Value="SelectedSeriesString"
                           AnchorOrigin="Origin.BottomLeft">
                    @* <MudSelectItem Value="@(string.Empty)"></MudSelectItem> *@
                    @foreach (var series in MirrorCategories.Keys)
                    {
                        <MudSelectItem Value="@(series.ToString())">@lc.Keys[MirrorSeriesDescKey[series]]</MudSelectItem>
                    }
                </MudSelect>
            </div>
        </div>
    </TitleContent>
    <MainContent>
        @if (FilteredMirrorCategories.Keys.Count == 0)
        {
            <MudItem lg="12">
                <NoResultsFoundView OnClearFilters="ClearFilters" />
            </MudItem>
        }
        else if (!showAllSeries && string.IsNullOrEmpty(SelectedSeriesString))
        {
            <div style="width:100%">
                <MirrorSeriesSelectionView SeriesToDisplay="@(SelectedShape is null ? MirrorCategories.Keys.ToList() : MirrorCategories.Keys.Where(ser=> Mirror.GetSeriesShape(ser) == (MirrorShape)SelectedShape).ToList())"
                                           OnSeriesSelected="@(async (s)=> {SelectedSeriesString = s.ToString();await js.ScrollToTop(MainLayout.BodyId);} )" />
            </div>
        }
        else
        {
            <MudGrid Justify="@(Justify.Center)" Class="bronze-FadeInHeight">
                @foreach (MirrorSeries series in FilteredMirrorCategories.Keys)
                {
                    <MudItem xs="12" sm="12" md="12" lg="6" Class="d-flex">
                        <div class="series-card">
                            <div class="card-header">

                                <img src="@SeriesImagePaths[series]"
                                     loading="lazy"
                                     alt="@lc.Keys[MirrorSeriesDescKey[series]]"
                                     class="card-header-image" />

                                <div class="card-header-overlay"></div>
                                @if (IsNewSeries(series))
                                {
                                    <div class="card-badges">
                                        <span class="badge">@lc.Keys["New"]</span>
                                    </div>
                                }

                                <div class="card-title-container">
                                    <h3 class="card-title">@lc.Keys[MirrorSeriesDescKey[series]]</h3>
                                    <p class="card-subtitle">@GetSeriesDescription(series)</p>
                                </div>

                            </div>
                            <div class="card-content">
                                <MudTable Items="@FilteredMirrorCategories[series]"
                                          T="Mirror"
                                          Dense="true"
                                          Hover="true"
                                          FixedHeader="@(true)"
                                          Height="450px"
                                          Class="mb-10"
                                          OnRowClick="@(RowClickEvent)"
                                          Style="background-color:var(--BackgroundColor)"
                                          Elevation="0">
                                    <HeaderContent>
                                        <MudTh Class="noselect" Style="border-bottom:2px solid var(--customPrimary);text-align:right;width:30px;background-color:var(--BackgroundColor)">@("No")</MudTh>
                                        <MudTh Class="noselect" Style="border-bottom:2px solid var(--customPrimary);background-color:var(--BackgroundColor)">@lc.Keys["Code"]</MudTh>
                                        @if (Mirror.GetSeriesShape(series) != MirrorShape.Circular)
                                        {
                                            <MudTh Class="noselect" Style="text-align:right;border-bottom:2px solid var(--customPrimary);background-color:var(--BackgroundColor)">@lc.Keys["Length"]</MudTh>
                                            <MudTh Class="noselect" Style="text-align:right;border-bottom:2px solid var(--customPrimary);background-color:var(--BackgroundColor)">@lc.Keys["Height"]</MudTh>
                                        }
                                        else
                                        {
                                            <MudTh Class="noselect" Style="text-align:right;border-bottom:2px solid var(--customPrimary);background-color:var(--BackgroundColor)">@lc.Keys["Diameter"]</MudTh>
                                        }

                                        <MudTh Class="noselect" Style="border-bottom:2px solid var(--customPrimary);background-color:var(--BackgroundColor)">@(lc.Keys["Extras"])</MudTh>

                                        @if (user.IsPricingVisible)
                                        {
                                            <MudTh Class="noselect" Style="text-align:right;width:110px;border-bottom:2px solid var(--customPrimary);background-color:var(--BackgroundColor)">@lc.Keys["RetailPrice"]</MudTh>
                                        }
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="@("No")" Style="white-space:nowrap;user-select:none;text-align:right">
                                            @($"{FilteredMirrorCategories[series].IndexOf(context) + 1}.")
                                        </MudTd>
                                        <MudTd Class="noselect" DataLabel="@lc.Keys["Code"]">@context.Code</MudTd>
                                        @if (Mirror.GetSeriesShape(series) != MirrorShape.Circular)
                                        {
                                            <MudTd Style="text-align:right" Class="noselect" DataLabel="@lc.Keys["Length"]">@($"{context.Length}{lc.Keys["cm"]}")</MudTd>
                                            <MudTd Style="text-align:right" Class="noselect" DataLabel="@lc.Keys["Height"]">@($"{context.Height}{lc.Keys["cm"]}")</MudTd>
                                        }
                                        else
                                        {
                                            <MudTd Style="text-align:right" Class="noselect" DataLabel="@lc.Keys["Diameter"]">@($"Φ{context.Diameter}{lc.Keys["cm"]}")</MudTd>
                                        }

                                        <MudTd DataLabel="@(lc.Keys["Extras"])" Class="d-flex flex-wrap">
                                            @if (context.Lighting.Light is not null)
                                            {
                                                <img src="@(LightImagePaths[(MirrorLight)context.Lighting.Light])"
                                                     alt="@(lc.Keys[MirrorLightDescKey[(MirrorLight)context.Lighting.Light]])"
                                                     style="width:40px;object-fit:contain;"
                                                     class="noselect mx-1"
                                                     loading="lazy"
                                                     title="@(lc.Keys[MirrorLightDescKey[(MirrorLight)context.Lighting.Light]])" />
                                            }

                                            @foreach (var extra in context.Extras)
                                            {
                                                <img src="@(OptionsImagePaths[extra.Option])"
                                                     alt="@(lc.Keys[MirrorOptionsDescKey[extra.Option]])"
                                                     style="width:40px;object-fit:contain"
                                                     class="noselect mx-1"
                                                     loading="lazy"
                                                     title="@(lc.Keys[MirrorOptionsDescKey[extra.Option]])" />
                                            }
                                        </MudTd>

                                        @if (user.IsPricingVisible)
                                        {
                                            <MudTd DataLabel="@lc.Keys["RetailPrice"]" Style="text-align:right">
                                                <span class="noselect">@((MirrorsStaticData.CatalogueMirrorsPricing[context.Code] * user.SelectedPriceIncreaseFactor).ToString("0.00\u20AC"))</span>
                                            </MudTd>
                                        }
                                    </RowTemplate>
                                </MudTable>
                                <div class="series-options">
                                    @* @foreach (MirrorLight light in DefaultLightPerSandblastDesign[series])
                                    {
                                        <div class="option-pill">
                                            <img src="@LightImagePaths[light]" alt="@lc.Keys[MirrorLightDescKey[light]]" />
                                            <span>@lc.Keys[MirrorLightDescKey[light]]</span>
                                        </div>
                                    }
                                    @foreach (MirrorOption option in DefaultExtrasPerSandblastDesign[series])
                                    {
                                        <div class="option-pill">
                                            <img src="@OptionsImagePaths[option]" alt="@lc.Keys[MirrorOptionsDescKey[option]]" />
                                            <span>@lc.Keys[MirrorOptionsDescKey[option]]</span>
                                        </div>
                                    } *@
                                </div>
                            </div>
                        </div>
                    </MudItem>
                }
            </MudGrid>
        }


    </MainContent>
</StoryContainer>