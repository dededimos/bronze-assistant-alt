@* The Dimensions Dialog - Modernized Design *@
@namespace BronzeArtWebApplication.Components.MirrorCreationComponents.Dialogs
@using BronzeArtWebApplication.Pages
@using MirrorsModelsLibrary.StaticData
@inject ILanguageContainerService lc
@inject AssembleMirrorViewModel vm

<MudDialog @bind-Visible:get="@IsVisible"
           @bind-Visible:set="@IsVisibleChanged"
           Gutters="@(false)"
           Class="ma-4"
           Style="max-width:400px;">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.Straighten" Class="mr-2" Color="Color.Dark" />
            @lc.Keys["DialogDimensionsTitle"]
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="@DialogContainerCssStyle" Class="pa-0">

            @* Display different UI based on HasFixedDimensions *@
            @if (!HasFixedDimensions)
            {
                <MudPaper Class="d-flex flex-column justify-center" Elevation="0">
                    <img src="/Images/MirrorsImages/HelperBackgrounds/TapeMeasure.png" tabindex="0" style="max-height:60px;object-fit:scale-down" />
                    @if (Shape is not MirrorShape.Circular)
                    {

                        <MudPaper Class="my-3 mx-auto" Elevation="0" Outlined="false" Style="max-width:250px">

                            <MudNumericField T="int?"
                                             AutoFocus="false"
                                             Label="@lc.Keys["Length"]"
                                             FullWidth="false"
                                             Max="Mirror.MaxLength"
                                             Min="Mirror.MinLength"
                                             HelperText="@lc.Keys["DimensionsHelperText"]"
                                             Variant="@ComboBoxesVariant"
                                             @bind-Value:get="@Length"
                                             @bind-Value:set="@LengthChanged"
                                             AdornmentText="@lc.Keys["cm"]"
                                             Adornment="Adornment.End">
                            </MudNumericField>
                            <MudSlider T="int"
                                       Step="1"
                                       Max="Mirror.MaxLength"
                                       Min="Mirror.MinLength"
                                       Color="Color.Primary"
                                       Class="pl-4 pr-4"
                                       @bind-NullableValue:get="@Length"
                                       @bind-NullableValue:set="@LengthChanged" />
                        </MudPaper>

                        <MudPaper Class="my-3 mx-auto" Elevation="0" Outlined="false" Style="max-width:250px">
                            <MudNumericField T="int?"
                                             Label="@lc.Keys["Height"]"
                                             FullWidth="false"
                                             Max="Mirror.MaxHeight"
                                             Min="Mirror.MinHeight"
                                             HelperText="@lc.Keys["DimensionsHelperText"]"
                                             Variant="@ComboBoxesVariant"
                                             @bind-Value:get="@Height"
                                             @bind-Value:set="@HeightChanged"
                                             AdornmentText="@lc.Keys["cm"]"
                                             Adornment="Adornment.End">
                            </MudNumericField>
                            <MudSlider T="int"
                                       Step="1"
                                       Max="Mirror.MaxHeight"
                                       Min="Mirror.MinHeight"
                                       Color="Color.Primary"
                                       Class="pl-4 pr-4"
                                       @bind-NullableValue:get="@Height"
                                       @bind-NullableValue:set="@HeightChanged" />
                        </MudPaper>
                    }
                    else
                    {
                        <MudPaper Class="my-3 mx-auto" Elevation="0" Outlined="false" Style="max-width:250px">
                            <MudNumericField T="int?"
                                             Label="@lc.Keys["Diameter"]"
                                             FullWidth="false"
                                             Max="Mirror.MaxDiameter"
                                             Min="Mirror.MinDiameter"
                                             HelperText="@lc.Keys["DimensionsHelperText"]"
                                             Variant="@ComboBoxesVariant"
                                             @bind-Value:get="@Diameter"
                                             @bind-Value:set="@DiameterChanged"
                                             AdornmentText="@lc.Keys["cm"]"
                                             Adornment="Adornment.End">
                            </MudNumericField>
                            <MudSlider T="int"
                                       Step="1"
                                       Max="Mirror.MaxDiameter"
                                       Min="Mirror.MinDiameter"
                                       Color="Color.Primary"
                                       Class="pl-4 pr-4"
                                       @bind-NullableValue:get="@Diameter"
                                       @bind-NullableValue:set="@DiameterChanged" />
                        </MudPaper>
                    }
                </MudPaper>
            }
            else
            {
                <div class="fixed-dimensions-container">
                    <fieldset class="rounded" style="user-select:none;border:1px solid var(--customDark);padding:8px;">
                        <legend style="margin-left: 20px;padding-inline: 10px;display:inline-block">
                            @lc.Keys["FixedDimensionsLegend"]
                        </legend>

                        <div class="dimension-options">
                            @foreach (var dimension in FixedDimensions)
                            {
                                <div class="dimension-option"
                                     @onclick="() => SelectFixedDimension(dimension)">
                                    <div class="dimension-option-content @(IsFixedDimensionSelected(dimension) ? "selected" : "")">
                                        @if (Shape is not MirrorShape.Circular)
                                        {
                                            <div class="dimension-display">
                                                <div class="dimension-values">
                                                    <span class="dimension-value">@dimension.Length</span>
                                                    <span class="dimension-separator">×</span>
                                                    <span class="dimension-value">@dimension.Height</span>
                                                    <span class="dimension-unit">@lc.Keys["cm"]</span>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="dimension-display">
                                                <div class="dimension-values">
                                                    <span class="dimension-value-prefix">Φ</span>
                                                    <span class="dimension-value">@dimension.Diameter</span>
                                                    <span class="dimension-unit">@lc.Keys["cm"]</span>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </fieldset>
                </div>
            }

        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudContainer Class="d-flex justify-center align-center">
            <MudButton Variant="@ActionButtonVariant"
                       Color="@ActionButtonColor"
                       StartIcon="@Icons.Material.Filled.ArrowBack"
                       Style="text-transform:none"
                       Class="ma-4"
                       OnClick="(() => OnPreviousClick.InvokeAsync())">
                @lc.Keys["DialogActionButtonBack"]
            </MudButton>
            <MudButton Variant="@ActionButtonVariant"
                       Color="@ActionButtonColor"
                       EndIcon="@Icons.Material.Filled.ArrowForward"
                       Style="text-transform:none"
                       Class="ma-4"
                       OnClick="(() => OnNextClick.InvokeAsync())">
                @lc.Keys["DialogActionButtonNext"]
            </MudButton>
        </MudContainer>
    </DialogActions>
</MudDialog>


@code {
#nullable enable
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter] public int? Length { get; set; }
    [Parameter] public EventCallback<int?> LengthChanged { get; set; }

    [Parameter] public int? Height { get; set; }
    [Parameter] public EventCallback<int?> HeightChanged { get; set; }

    [Parameter] public int? Diameter { get; set; }
    [Parameter] public EventCallback<int?> DiameterChanged { get; set; }

    [Parameter] public MirrorShape? Shape { get; set; }

    [Parameter] public EventCallback OnPreviousClick { get; set; }
    [Parameter] public EventCallback OnNextClick { get; set; }

    [Parameter] public bool HasFixedDimensions { get; set; } = false;
    [Parameter] public List<MirrorDimension> FixedDimensions { get; set; } = [];

    [Parameter] public MirrorDimension? SelectedFixedDimension { get; set; }
    [Parameter] public EventCallback<MirrorDimension> SelectedFixedDimensionChanged { get; set; }

    public static bool GetHasFixedDimensions(MirrorSeries? series)
    {
        return series is MirrorSeries.R7
                      or MirrorSeries.R9
                      or MirrorSeries.P8
                      or MirrorSeries.P9
                      or MirrorSeries.ND
                      or MirrorSeries.N1
                      or MirrorSeries.N2
                      or MirrorSeries.NS
                      or MirrorSeries.ES
                      or MirrorSeries.EL;
    }

    private void SelectFixedDimension(MirrorDimension dimension)
    {
        SelectedFixedDimension = dimension;

        // Update the Length, Height, or Diameter based on the selected fixed dimension
        if (Shape is not MirrorShape.Circular)
        {
            Length = dimension.Length;
            Height = dimension.Height;
            LengthChanged.InvokeAsync(Length);
            HeightChanged.InvokeAsync(Height);
        }
        else
        {
            Diameter = dimension.Diameter;
            DiameterChanged.InvokeAsync(Diameter);
        }

        SelectedFixedDimensionChanged.InvokeAsync(dimension);
    }

    private bool IsFixedDimensionSelected(MirrorDimension dimension)
    {
        if (SelectedFixedDimension == null) return false;

        if (Shape is not MirrorShape.Circular)
        {
            return dimension.Length == SelectedFixedDimension.Length &&
                   dimension.Height == SelectedFixedDimension.Height;
        }
        else
        {
            return dimension.Diameter == SelectedFixedDimension.Diameter;
        }
    }
    // Class to represent a fixed dimension option
    public class MirrorDimension
    {
        public int Length { get; set; }
        public int Height { get; set; }
        public int Diameter { get; set; }
    }
}