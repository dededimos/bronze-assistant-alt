@*  Screens Dialog  *@
@namespace BronzeArtWebApplication.Components.MirrorCreationComponents.Dialogs
@using BronzeArtWebApplication.Shared.Services
@inject ILanguageContainerService languageContainer
@inject BronzeUser user
@inject MirrorDialogNavigator dialogNav

<MudDialog @bind-Visible:get="@IsVisible" @bind-Visible:set="@IsVisibleChanged" Gutters="@false" Class="ma-4">
    <TitleContent>
        <MudText Typo="Typo.h6">
            @languageContainer.Keys["DialogScreenTitle"]
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="@DialogContainerCssStyle">
            <fieldset class="rounded" style="user-select:none;border:1px solid var(--customDark)">
                <legend style="margin-left: 20px;padding-inline: 10px;display:inline-block">
                    @languageContainer.Keys["DialogScreenFieldsetLegend"]
                </legend>
                <MudPaper Class="d-flex flex-wrap justify-center pa-4" Elevation="0">
                    <!-- 1.Clock -->
                    @*Show Option only if Enabled or Already Part of it*@
                    @if (IsMediaEnabled(MirrorOption.Clock) || HasClock)
                    {
                        <MudTooltip Placement="@Placement.Top">
                            <ChildContent>
                                <MudPaper Elevation="0"
                                          Outlined="false"
                                          Class="ma-1 pa-1 d-flex flex-column justify-center align-center"
                                          @onclick="((e) => { if(!IsMediaEnabled(MirrorOption.Clock)) return; HasClock = !HasClock;HasClockChanged.InvokeAsync(HasClock); })">
                                    <img src="@(OptionsImagePaths[MirrorOption.Clock])"
                                         alt="@(languageContainer.Keys[MirrorOptionsDescKey[MirrorOption.Clock]])"
                                         style="@((IsMediaEnabled(MirrorOption.Clock) ? "max-height:120px" : "max-height:120px;filter:grayscale(100%)"))" />
                                    <MudCheckBox T="bool"
                                                 Color="@CheckBoxesColor"
                                                 Dense="true"
                                                 Class="mt-2"
                                                 Disabled="@(!IsMediaEnabled(MirrorOption.Clock))"
                                                 @bind-Value:get="@HasClock"
                                                 @bind-Value:set="@HasClockChanged">
                                    </MudCheckBox>
                                </MudPaper>
                            </ChildContent>
                            <TooltipContent>
                                <MudContainer Class="d-flex flex-column justify-center align-center ma-0 pa-0">
                                    @if (!IsMediaEnabled(MirrorOption.Clock))
                                    {
                                        <MudText Typo="Typo.caption">@languageContainer.Keys["CannotChangeOptionForThisMirror"]</MudText>
                                    }
                                    <MudText Typo="Typo.caption">@languageContainer.Keys["DialogScreenTimeCaption"]</MudText>
                                    @if (user.IsPricingVisible)
                                    {
                                        <MudText Typo="Typo.caption">@((MirrorExtra.GetOptionPrice(MirrorOption.Clock) * PriceIncreaseFactor).ToString("0.00\u20AC"))</MudText>
                                    }
                                </MudContainer>
                            </TooltipContent>
                        </MudTooltip>
                    }

                    <!-- 2.Bluetooth -->
                    @*Show Option only if Enabled or Already Part of it*@
                    @if (IsMediaEnabled(MirrorOption.BlueTooth) || HasBluetooth)
                    {
                        <MudTooltip Placement="@Placement.Top">
                            <ChildContent>
                                <MudPaper Elevation="0"
                                          Outlined="false"
                                          Class="ma-1 pa-1 d-flex flex-column justify-center align-center"
                                          @onclick="((e) => { if(!IsMediaEnabled(MirrorOption.BlueTooth)) return;HasBluetooth = !HasBluetooth;HasBluetoothChanged.InvokeAsync(HasBluetooth); })">
                                    <img src="@(OptionsImagePaths[MirrorOption.BlueTooth])"
                                         alt="@(languageContainer.Keys[MirrorOptionsDescKey[MirrorOption.BlueTooth]])"
                                         style="@((IsMediaEnabled(MirrorOption.BlueTooth) ? "max-height:120px" : "max-height:120px;filter:grayscale(100%)"))" />
                                    <MudCheckBox T="bool"
                                                 Color="@CheckBoxesColor"
                                                 Dense="true"
                                                 Class="mt-2"
                                                 Disabled="@(!IsMediaEnabled(MirrorOption.BlueTooth))"
                                                 @bind-Value:get="@HasBluetooth"
                                                 @bind-Value:set="@HasBluetoothChanged">
                                    </MudCheckBox>
                                </MudPaper>
                            </ChildContent>
                            <TooltipContent>
                                <MudContainer Class="d-flex flex-column justify-center align-center ma-0 pa-0">
                                    @if (!IsMediaEnabled(MirrorOption.BlueTooth))
                                    {
                                        <MudText Typo="Typo.caption">@languageContainer.Keys["CannotChangeOptionForThisMirror"]</MudText>
                                    }
                                    <MudText Typo="Typo.caption">@languageContainer.Keys["DialogScreenBluetoothCaption"]</MudText>
                                    @if (user.IsPricingVisible)
                                    {
                                        <MudText Typo="Typo.caption">@((MirrorExtra.GetOptionPrice(MirrorOption.BlueTooth) * PriceIncreaseFactor).ToString("0.00\u20AC"))</MudText>
                                    }
                                </MudContainer>
                            </TooltipContent>
                        </MudTooltip>
                    }

                    <!-- 3.Display11 -->
                    @*Show Option only if Enabled or Already Part of it*@
                    @if (IsMediaEnabled(MirrorOption.DisplayRadio) || HasDisplay11)
                    {
                        <MudTooltip Placement="@Placement.Top">
                            <ChildContent>
                                <MudPaper Elevation="0"
                                          Outlined="false"
                                          Class="ma-1 pa-1 d-flex flex-column justify-center align-center"
                                          @onclick="((e) => { if(!IsMediaEnabled(MirrorOption.DisplayRadio)) return;HasDisplay11 = !HasDisplay11;HasDisplay11Changed.InvokeAsync(HasDisplay11); })">
                                    <img src="@(OptionsImagePaths[MirrorOption.DisplayRadio])"
                                         alt="@(languageContainer.Keys[MirrorOptionsDescKey[MirrorOption.DisplayRadio]])"
                                         style="@((IsMediaEnabled(MirrorOption.DisplayRadio) ? "max-height:120px" : "max-height:120px;filter:grayscale(100%)"))" />
                                    <MudCheckBox T="bool"
                                                 Color="@CheckBoxesColor"
                                                 Dense="true"
                                                 Class="mt-2"
                                                 Disabled="@(!IsMediaEnabled(MirrorOption.DisplayRadio))"
                                                 @bind-Value:get="@HasDisplay11"
                                                 @bind-Value:set="@HasDisplay11Changed">
                                    </MudCheckBox>
                                </MudPaper>
                            </ChildContent>
                            <TooltipContent>
                                <MudContainer Class="d-flex flex-column justify-center align-center ma-0 pa-0">
                                    @if (!IsMediaEnabled(MirrorOption.DisplayRadio))
                                    {
                                        <MudText Typo="Typo.caption">@languageContainer.Keys["CannotChangeOptionForThisMirror"]</MudText>
                                    }
                                    <MudText Typo="Typo.caption">@languageContainer.Keys["DialogScreenDisplay11Caption"]</MudText>
                                    @if (user.IsPricingVisible)
                                    {
                                        <MudText Typo="Typo.caption">@((MirrorExtra.GetOptionPrice(MirrorOption.DisplayRadio) * PriceIncreaseFactor).ToString("0.00\u20AC"))</MudText>
                                    }
                                </MudContainer>
                            </TooltipContent>
                        </MudTooltip>
                    }

                    <!-- 4.Display11 Black -->
                    @*Show Option only if Enabled or Already Part of it*@
                    @if (IsMediaEnabled(MirrorOption.DisplayRadioBlack) || HasDisplay11Black)
                    {
                        <MudTooltip Placement="@Placement.Top">
                            <ChildContent>
                                <MudPaper Elevation="0"
                                          Outlined="false"
                                          Class="ma-1 pa-1 d-flex flex-column justify-center align-center"
                                          @onclick="((e) => { if(!IsMediaEnabled(MirrorOption.DisplayRadioBlack)) return;HasDisplay11Black = !HasDisplay11Black;HasDisplay11BlackChanged.InvokeAsync(HasDisplay11Black); })">
                                    <img src="@(OptionsImagePaths[MirrorOption.DisplayRadioBlack])"
                                         alt="@(languageContainer.Keys[MirrorOptionsDescKey[MirrorOption.DisplayRadioBlack]])"
                                         style="@((IsMediaEnabled(MirrorOption.DisplayRadioBlack) ? "max-height:120px" : "max-height:120px;filter:grayscale(100%)"))" />
                                    <MudCheckBox T="bool"
                                                 Color="@CheckBoxesColor"
                                                 Dense="true"
                                                 Class="mt-2"
                                                 Disabled="@(!IsMediaEnabled(MirrorOption.DisplayRadioBlack))"
                                                 @bind-Value:get="@HasDisplay11Black"
                                                 @bind-Value:set="@HasDisplay11BlackChanged">
                                    </MudCheckBox>
                                </MudPaper>
                            </ChildContent>
                            <TooltipContent>
                                <MudContainer Class="d-flex flex-column justify-center align-center ma-0 pa-0">
                                    @if (!IsMediaEnabled(MirrorOption.DisplayRadioBlack))
                                    {
                                        <MudText Typo="Typo.caption">@languageContainer.Keys["CannotChangeOptionForThisMirror"]</MudText>
                                    }
                                    <MudText Typo="Typo.caption">@languageContainer.Keys["DialogScreenDisplay11BlackCaption"]</MudText>
                                    @if (user.IsPricingVisible)
                                    {
                                        <MudText Typo="Typo.caption">@((MirrorExtra.GetOptionPrice(MirrorOption.DisplayRadioBlack) * PriceIncreaseFactor).ToString("0.00\u20AC"))</MudText>
                                    }
                                </MudContainer>
                            </TooltipContent>
                        </MudTooltip>
                    }

                    <!-- 4.Display19 -->
                    @*Show Option only if Enabled or Already Part of it*@
                    @if (IsMediaEnabled(MirrorOption.Display19) || HasDisplay19)
                    {
                        <MudTooltip Placement="@Placement.Top">
                            <ChildContent>
                                <MudPaper Elevation="0"
                                          Outlined="false"
                                          Class="ma-1 pa-1 d-flex flex-column justify-center align-center"
                                          @onclick="((e) => { if(!IsMediaEnabled(MirrorOption.Display19)) return;HasDisplay19 = !HasDisplay19;HasDisplay19Changed.InvokeAsync(HasDisplay19); })">
                                    <img src="@(OptionsImagePaths[MirrorOption.Display19])"
                                         alt="@(languageContainer.Keys[MirrorOptionsDescKey[MirrorOption.Display19]])"
                                         style="@((IsMediaEnabled(MirrorOption.Display19) ? "max-height:120px" : "max-height:120px;filter:grayscale(100%)"))" />
                                    <MudCheckBox T="bool"
                                                 Color="@CheckBoxesColor"
                                                 Dense="true"
                                                 Class="mt-2"
                                                 Disabled="@(!IsMediaEnabled(MirrorOption.Display19))"
                                                 @bind-Value:get="@HasDisplay19"
                                                 @bind-Value:set="@HasDisplay19Changed">
                                    </MudCheckBox>
                                </MudPaper>
                            </ChildContent>
                            <TooltipContent>
                                <MudContainer Class="d-flex flex-column justify-center align-center ma-0 pa-0">
                                    @if (!IsMediaEnabled(MirrorOption.Display19))
                                    {
                                        <MudText Typo="Typo.caption">@languageContainer.Keys["CannotChangeOptionForThisMirror"]</MudText>
                                    }
                                    <MudText Typo="Typo.caption">@languageContainer.Keys["DialogScreenDisplay19Caption"]</MudText>
                                    @if (user.IsPricingVisible)
                                    {
                                        <MudText Typo="Typo.caption">@((MirrorExtra.GetOptionPrice(MirrorOption.Display19) * PriceIncreaseFactor).ToString("0.00\u20AC"))</MudText>
                                    }
                                </MudContainer>
                            </TooltipContent>
                        </MudTooltip>
                    }
                    <!-- #endregion -->
                </MudPaper>
            </fieldset>

            <table style="margin-left:auto;margin-right:auto;user-select:none;">
                @if (IsMediaEnabled(MirrorOption.Clock) || HasClock)
                {
                    <tr>
                        <td class="mr-2" style="font-weight: bolder; text-align: center">Time</td>
                        <td>| @languageContainer.Keys["DialogScreenTimeCaption"]</td>
                    </tr>
                }
                @if (IsMediaEnabled(MirrorOption.BlueTooth) || HasBluetooth)
                {
                    <tr>
                        <td class="mr-2" style="font-weight:bolder;text-align:center">BlueTooth</td>
                        <td>| @languageContainer.Keys["DialogScreenBluetoothCaption"] </td>
                    </tr>
                }
                @if (IsMediaEnabled(MirrorOption.DisplayRadio) || HasDisplay11)
                {
                    <tr>
                        <td class="mr-2" style="font-weight: bolder; text-align: center">Display11</td>
                        <td>| @languageContainer.Keys["DialogScreenDisplay11Caption"]</td>
                    </tr>
                }
                @if (IsMediaEnabled(MirrorOption.DisplayRadioBlack) || HasDisplay11Black)
                {
                    <tr>
                        <td class="mr-2" style="font-weight: bolder; text-align: center">Display11b</td>
                        <td>| @languageContainer.Keys["DialogScreenDisplay11BlackCaption"]</td>
                    </tr>
                }
                @if (IsMediaEnabled(MirrorOption.Display19) || HasDisplay19)
                {
                    <tr>
                        <td class="mr-2" style="font-weight: bolder; text-align: center">Display19</td>
                        <td>| @languageContainer.Keys["DialogScreenDisplay19Caption"]</td>
                    </tr>
                }
            </table>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudContainer Class="d-flex justify-center align-center">
            <MudButton Variant="@ActionButtonVariant"
                       Color="@ActionButtonColor"
                       Style="text-transform:none"
                       Class="ma-4"
                       OnClick="(() => OnPreviousClick.InvokeAsync())">
                @languageContainer.Keys["DialogActionButtonBack"]
            </MudButton>
            @if (dialogNav.GetNextDialog() != MirrorDialog.None)
            {
                <MudButton Variant="@ActionButtonVariant"
                           Color="@ActionButtonColor"
                           Style="text-transform:none"
                           Class="ma-4"
                           OnClick="(() => OnNextClick.InvokeAsync())">
                    @languageContainer.Keys["DialogActionButtonNext"]
                </MudButton>
            }
            else
            {
                <MudButton Variant="@ActionButtonVariant"
                           Color="@ActionButtonColor"
                           Style="text-transform:none"
                           Class="ma-4"
                           OnClick="(() => {IsVisible = false;IsVisibleChanged.InvokeAsync(IsVisible);})">
                    @languageContainer.Keys["DialogActionButtonFinish"]
                </MudButton>
            }
        </MudContainer>
    </DialogActions>
</MudDialog>


