@* The Supports Pop Dialog -- Shape Parameter Defines which Supports to Show as Available  *@
@namespace BronzeArtWebApplication.Components.MirrorCreationComponents.Dialogs
@inject ILanguageContainerService languageContainer

<MudDialog @bind-Visible:get="@IsVisible" @bind-Visible:set="@IsVisibleChanged" Gutters="@(false)" Class="ma-4">
    <TitleContent>
        <MudText Typo="Typo.h6">@languageContainer.Keys["DialogSupportsTitle"]</MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="@($"{DialogContainerCssStyle};max-width:500px")">
            <MudPaper Class="d-flex flex-wrap justify-center" Elevation="0">

                <img src="@GetSupportPhotoPath()"
                style="max-height:300px" />

                <MudPaper Outlined="false"
                Elevation="0"
                Class="d-flex flex-column mx-4 my-3"
                Style="width:100%;max-width:350px">
                    <MudSelect T="MirrorSupport?"
                    Label="@languageContainer.Keys["Support"]"
                    FullWidth="true"
                    Variant="@ComboBoxesVariant"
                    @bind-Value:get="@SelectedSupport"
                    @bind-Value:set="@SelectedSupportChanged"
                    ToStringFunc="(v => v != null ? languageContainer.Keys[MirrorSupportDescKey[(MirrorSupport)v]] : string.Empty)">
                        @foreach (MirrorSupport value in SelectableSupports)
                        {
                            <MudSelectItem T="MirrorSupport?" Value="@((MirrorSupport?)value)"></MudSelectItem>
                        }
                    </MudSelect>
                </MudPaper>
            </MudPaper>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudContainer Class="d-flex justify-center align-center">
            <MudButton Variant="@ActionButtonVariant"
            Color="@ActionButtonColor"
            Style="text-transform:none"
            Class="ma-4"
            OnClick="(() => OnPreviousClick.InvokeAsync())">
                @languageContainer.Keys["DialogActionButtonBack"]
            </MudButton>
            <MudButton Variant="@ActionButtonVariant"
            Color="@ActionButtonColor"
            Style="text-transform:none"
            Class="ma-4"
            OnClick="(() => OnNextClick.InvokeAsync())">
                @languageContainer.Keys["DialogActionButtonNext"]
            </MudButton>
        </MudContainer>
    </DialogActions>
</MudDialog>




@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public MirrorSupport? SelectedSupport { get; set; }
    [Parameter]
    public EventCallback<MirrorSupport?> SelectedSupportChanged { get; set; }

    [Parameter]
    public EventCallback OnPreviousClick { get; set; }
    [Parameter]
    public EventCallback OnNextClick { get; set; }

    [Parameter]
    public MirrorShape? Shape { get; set; }
    [Parameter]
    public List<MirrorSupport> SelectableSupports { get; set; } = [];

    /// <summary>
    /// Gets the Support Image Path based on what the user has Selected
    /// </summary>
    /// <returns></returns>
    private string GetSupportPhotoPath()
    {
        if (SelectedSupport != null && Shape != null)
        {
            return SupportImagePaths[((MirrorSupport)SelectedSupport, (MirrorShape)Shape)];
        }
        else
        {
            return "/Images/MirrorsImages/HelperBackgrounds/MirrorSupport.png";
        }
    }
}
