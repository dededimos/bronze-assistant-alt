@*  *@
@namespace BronzeArtWebApplication.Components.MirrorCreationComponents.Dialogs
@using BronzeArtWebApplication.Shared.Services
@inject ILanguageContainerService languageContainer
@inject BronzeUser user
@inject MirrorDialogNavigator dialogNav

<MudDialog @bind-Visible:get="@IsVisible" @bind-Visible:set="@IsVisibleChanged" Gutters="false" Class="ma-4">
    <TitleContent>
        <MudText Typo="Typo.h6">
            @languageContainer.Keys["DialogVariousTitle"]
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="@DialogContainerCssStyle">
            <fieldset class="rounded" style="user-select:none;border:1px solid var(--customDark)">
                <legend style="margin-left: 20px;padding-inline: 10px;display:inline-block">
                    @languageContainer.Keys["DialogVariousFieldsetLegend"]
                </legend>
                <MudPaper Class="d-flex flex-wrap justify-center" Elevation="0">
                    <!-- 1.Lid -->
                    @*Show Option only if Enabled or Already Part of it*@
                    @if (IsExtraEnabled(MirrorOption.IPLid) || HasLid)
                    {
                        <MudTooltip Placement="@Placement.Top">
                            <ChildContent>
                                <MudPaper Elevation="0"
                                          Outlined="false"
                                          Class="pa-4 d-flex flex-column justify-center align-center"
                                          @onclick="((e) => { if(!IsExtraEnabled(MirrorOption.IPLid)) return;HasLid = !HasLid;HasLidChanged.InvokeAsync(HasLid); })">
                                    <img src="@(OptionsImagePaths[MirrorOption.IPLid])"
                                         alt="@(languageContainer.Keys[MirrorOptionsDescKey[MirrorOption.IPLid]])"
                                         style="@((IsExtraEnabled(MirrorOption.IPLid) ? "max-height:120px" : "max-height:120px;filter:grayscale(100%)"))" />
                                    <MudCheckBox T="bool"
                                                 Color="@CheckBoxesColor"
                                                 Dense="true"
                                                 Class="mt-2"
                                                 Disabled="@(!IsExtraEnabled(MirrorOption.IPLid))"
                                                 @bind-Value:get="@(HasLid)"
                                                 @bind-Value:set="@(HasLidChanged)">
                                    </MudCheckBox>
                                </MudPaper>
                            </ChildContent>
                            <TooltipContent>
                                <MudContainer Class="d-flex flex-column justify-center align-center ma-0 pa-0">
                                    @if (!IsExtraEnabled(MirrorOption.IPLid))
                                    {
                                        <MudText Typo="Typo.caption">@languageContainer.Keys["CannotChangeOptionForThisMirror"]</MudText>
                                    }
                                    <MudText Typo="Typo.caption">@languageContainer.Keys["DialogVariousLid"]</MudText>
                                    @if (user.IsPricingVisible)
                                    {
                                        <MudText Typo="Typo.caption">@((MirrorExtra.GetOptionPrice(MirrorOption.IPLid) * PriceIncreaseFactor).ToString("0.00\u20AC"))</MudText>
                                    }
                                </MudContainer>
                            </TooltipContent>
                        </MudTooltip>
                    }


                    <!-- 2.Rounded Corners -->
                    @*Show Option only if Enabled or Already Part of it*@
                    @if (IsExtraEnabled(MirrorOption.RoundedCorners) || HasRounding)
                    {
                        <MudTooltip Placement="@Placement.Top">
                            <ChildContent>
                                <MudPaper Elevation="0"
                                          Outlined="false"
                                          Class="pa-4 d-flex flex-column justify-center align-center"
                                          @onclick="((e) => { if(!IsExtraEnabled(MirrorOption.RoundedCorners)) return;HasRounding = !HasRounding;HasRoundingChanged.InvokeAsync(HasRounding); })">
                                    <img src="@(OptionsImagePaths[MirrorOption.RoundedCorners])"
                                         alt="@(languageContainer.Keys[MirrorOptionsDescKey[MirrorOption.RoundedCorners]])"
                                         style="@((IsExtraEnabled(MirrorOption.RoundedCorners) ? "max-height:120px" : "max-height:120px;filter:grayscale(100%)"))" />
                                    <MudCheckBox T="bool"
                                                 Color="@CheckBoxesColor"
                                                 Dense="true"
                                                 Class="mt-2"
                                                 Disabled="@(!IsExtraEnabled(MirrorOption.RoundedCorners))"
                                                 @bind-Value:get="@(HasRounding)"
                                                 @bind-Value:set="@(HasRoundingChanged)">
                                    </MudCheckBox>
                                </MudPaper>
                            </ChildContent>
                            <TooltipContent>
                                <MudContainer Class="d-flex flex-column justify-center align-center ma-0 pa-0">
                                    @if (!IsExtraEnabled(MirrorOption.RoundedCorners))
                                    {
                                        <MudText Typo="Typo.caption">@languageContainer.Keys["CannotChangeOptionForThisMirror"]</MudText>
                                    }
                                    <MudText Typo="Typo.caption">@languageContainer.Keys["DialogVariousRounding"]</MudText>
                                    @if (user.IsPricingVisible)
                                    {
                                        <MudText Typo="Typo.caption">@((MirrorExtra.GetOptionPrice(MirrorOption.RoundedCorners) * PriceIncreaseFactor).ToString("0.00\u20AC"))</MudText>
                                    }
                                </MudContainer>
                            </TooltipContent>
                        </MudTooltip>
                    }
                </MudPaper>
            </fieldset>

            <table style="margin-left:auto;margin-right:auto;user-select:none">
                @if (IsExtraEnabled(MirrorOption.IPLid) || HasLid)
                {
                    <tr>
                        <td class="mr-2" style="font-weight: bolder; text-align: center">Close Lid</td>
                        <td>| @languageContainer.Keys["DialogVariousLid"]</td>
                    </tr>
                }
                @if (IsExtraEnabled(MirrorOption.RoundedCorners) || HasRounding)
                {
                    <tr>
                        <td class="mr-2" style="font-weight:bolder;text-align:center">Round Edges</td>
                        <td>| @languageContainer.Keys["DialogVariousRounding"] </td>
                    </tr>
                }
            </table>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudContainer Class="d-flex justify-center align-center">
            <MudButton Variant="@ActionButtonVariant"
                       Color="@ActionButtonColor"
                       Style="text-transform:none"
                       Class="ma-4"
                       OnClick="(() => OnPreviousClick.InvokeAsync())">
                @languageContainer.Keys["DialogActionButtonBack"]
            </MudButton>
            @if (dialogNav.GetNextDialog() != MirrorDialog.None)
            {
                <MudButton Variant="@ActionButtonVariant"
                           Color="@ActionButtonColor"
                           Style="text-transform:none"
                           Class="ma-4"
                           OnClick="(() => OnNextClick.InvokeAsync())">
                    @languageContainer.Keys["DialogActionButtonNext"]
                </MudButton>
            }
            else
            {
                <MudButton Variant="@ActionButtonVariant"
                           Color="@ActionButtonColor"
                           Style="text-transform:none"
                           Class="ma-4"
                           OnClick="(() => {IsVisible = false;IsVisibleChanged.InvokeAsync(IsVisible);})">
                    @languageContainer.Keys["DialogActionButtonFinish"]
                </MudButton>
            }
        </MudContainer>
    </DialogActions>
</MudDialog>


