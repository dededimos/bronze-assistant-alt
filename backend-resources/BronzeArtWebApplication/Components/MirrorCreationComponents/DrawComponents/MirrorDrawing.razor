@*Mirror Drawing Component*@
@namespace BronzeArtWebApplication.Components.MirrorCreationComponents.DrawComponents
@using MirrorsModelsLibrary.DrawsBuilder.Models
@using SVGDrawingLibrary.Models
@using SVGDrawingLibrary.Models.ConcreteShapes
@using SVGDrawingLibrary.Enums
@using MirrorsModelsLibrary.DrawsBuilder.Models.MeasureObjects
@inject AssembleMirrorViewModel vm
@inject ILanguageContainerService lc

<svg viewBox="0 0 @(ContainerBox.Length) @(ContainerBox.Height)"
     fill="transparent"
     style="max-height:80vh">

    <defs>
        <filter id="inset-shadow" x="-50%" y="-50%" width="200%" height="200%">
            <feComponentTransfer in=SourceAlpha>
                <feFuncA type="table" tableValues="1 0" />
            </feComponentTransfer>
            <feGaussianBlur stdDeviation="5" />
            <feOffset dx="0" dy="0" result="offsetblur" />
            <feFlood flood-color="rgb(0, 0, 0)" result="color" />
            <feComposite in2="offsetblur" operator="in" />
            <feComposite in2="SourceAlpha" operator="in" />
            <feMerge>
                <feMergeNode in="SourceGraphic" />
                <feMergeNode />
            </feMerge>
        </filter>
        <pattern id="sandblastPattern" width="5" height="5" viewBox="0 0 40 40" patternUnits="userSpaceOnUse" patternTransform="rotate(136)">
            <rect width="100%" height="100%" fill="rgba(255, 255, 255,1)" />
            <path d="M-0.5 20v20h1v-20zM39.5 20v20h1v-20z" fill="rgba(0, 0, 0,1)" />
            <path d="M-10 29.5 h60 v1 h-60z" fill="rgba(0, 0, 0,1)" />
            <path d="M19.5 0v40h1v-40z" fill="rgba(0, 0, 0,1)" />
            <path d="M-10 9.5h60v1h-60z" fill="rgba(0, 0, 0,1)" />
            <path d="M-0.5 0v20h1v-20zM39.5 0v20h1v-20z" fill="rgba(0, 0, 0,1)" />
        </pattern>
        <pattern id="hatchPattern" width="20" height="20" viewBox="0 0 40 40" patternUnits="userSpaceOnUse" patternTransform="rotate(135)">
            <rect width="100%" height="100%" fill="ghostwhite" />
            <path d="M-10 30h60v1h-60zM-10-10h60v1h-60" fill="black" />
            <path d="M-10 10h60v1h-60zM-10-30h60v1h-60z" fill="black" />
        </pattern>

        <linearGradient id="FrameChromeGradient">
            <stop stop-color="silver" offset="40%" />
            <stop stop-color="ghostwhite" offset="100%" />
        </linearGradient>
        <linearGradient id="FrameBlackGradient" >
            <stop stop-color="black" offset="0%" />
            <stop stop-color="gray" offset="100%" />
        </linearGradient>
        <linearGradient id="FrameGraphiteGradient" >
            <stop stop-color="#383428" offset="0%" />
            <stop stop-color="gray" offset="100%" />
        </linearGradient>
        <linearGradient id="FrameWhiteGradient" >
            <stop stop-color="lightgray" offset="0%" />
            <stop stop-color="ghostwhite" offset="40%" />
        </linearGradient>
        <linearGradient id="FrameBronzeGradient" >
            <stop stop-color="#CD7F32" offset="0%" />
            <stop stop-color="#FCF6BA" offset="100%" />
        </linearGradient>
        <linearGradient id="FrameCopperGradient" >
            <stop stop-color="#a64545" offset="0%" />
            <stop stop-color="#a64450" offset="100%" />
        </linearGradient>
        <linearGradient id="FrameGoldGradient" >
            <stop stop-color="#BF953F" offset="0%" />
            <stop stop-color="#FCF6BA" offset="100%" />
        </linearGradient>
    </defs>

    <!--All Shapes-->
    @foreach (var shape in Draw.GetShapesToDraw())
    {
        <path id="@shape.Name"
          d="@(shape.GetShapePathData())"
          stroke="@shape.Stroke"
          fill="@shape.Fill"
          filter="@shape.Filter"
          opacity="@shape.Opacity" />
    }

    <!--Boundary Path Data-->
    @if (ShowDrawBoundaries is true)
    {
        <path d="@ExtrasBoundary.GetShapePathData()"
          stroke="@ExtrasBoundary.Stroke"
          fill="@ExtrasBoundary.Fill" />

        <path d="@SandblastBoundary.GetShapePathData()"
          stroke="@SandblastBoundary.Stroke"
          fill="@SandblastBoundary.Fill" />

        <path d="@SupportsBoundary.GetShapePathData()"
          stroke="@SupportsBoundary.Stroke"
          fill="@SupportsBoundary.Fill" />
    }


    <!--Show Labels in Extras-->
    @if (ShowLabeledExtras is true)
    {
        @foreach (var extraDraw in Draw.ExtrasDraws)
        {
            <path d="@(extraDraw.GetTextAnchorMiddleLinePath())" id="anchor@(extraDraw.Name)" />
            <text>
                <text x="0"
              fill="black"
              font-size="18"
              text-anchor="middle"
              dominant-baseline="middle"
              class="noselect">
                    <textPath href="#anchor@(extraDraw.Name)" startOffset="50%">
                        @(lc.Keys[extraDraw.Name])
                    </textPath>
                </text>
            </text>
        };
    }

    <!--Show Dimensions-->
    @if (ShowGlassDimensions is true)
    {
        foreach (var dimension in Draw.DimensionsDraws)
        {
            <path id="@dimension.Name"
          d="@(dimension.GetShapePathData())"
          stroke="@dimension.Stroke"
          fill="@dimension.Fill"
          filter="@dimension.Filter"
          opacity="@dimension.Opacity" />

            <path d="@(dimension.GetTextAnchorMiddleLinePath())" id="anchor@(dimension.Name)" />
            <text>
                <text x="0"
              fill="black"
              font-size="18"
              text-anchor="middle"
              dominant-baseline="middle"
              class="noselect">
                    <textPath href="#anchor@(dimension.Name)" startOffset="50%">
                        @(dimension.Name == DrawShape.HEIGHTDIM ? $"{vm.Height}{lc.Keys["cm"]}" : $"{vm.Length}{lc.Keys["cm"]}" )
                    </textPath>
                </text>
            </text>
        }
    }

</svg>

@code {



}
