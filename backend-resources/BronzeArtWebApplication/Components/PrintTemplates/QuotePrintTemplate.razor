@using BathAccessoriesModelsLibrary.Services;
@using BronzeArtWebApplication.Pages.NewAccessoriesPage.VariousComponents
@using BronzeArtWebApplication.Shared.ViewModels.AccessoriesPageViewModels;
@using BronzeRulesPricelistLibrary.Models.Priceables.AccessoriesPriceables;
@using System.Globalization;
@using System.Text.RegularExpressions;
@using System.Web;
@inject ILanguageContainerService Lc
@implements IDisposable
@inject BasketViewModel Basket
@inject BronzeUser user

@code{
    private int itemsPerPage = 12;

    ///<summary>
    ///Weather to include the sheets or not 
    /// </summary>
    [Parameter]
    public bool IncludeSheets { get; set; }
    [Parameter]
    public bool IncludePriceTable { get; set; } = true;

    protected override void OnInitialized()
    {
        Basket.PropertyChanged += BasketChanged;
    }
    public bool IsLastItemOnEndOfPage()
    {
        return ((Basket.Products.Count % itemsPerPage) == 0);
    }
    public bool IsLastItem(BasketItemViewModel item)
    {
        return (Basket.Products.IndexOf(item) == Basket.Products.Count - 1);
    }
    private void BasketChanged(object sender ,System.ComponentModel.PropertyChangedEventArgs e)
    {
        StateHasChanged();
    }

    private string GetRowPageBreakStyleOrNot(BasketItemViewModel item)
    {
        if (IsItemLastOnItsPage(item) && !IsLastItem(item))
        {
            return "page-break-after:always;";
        }
        else
        {
            return string.Empty; 
        }

    }

    private bool IsItemLastOnItsPage(BasketItemViewModel item)
    {
        return ((Basket.Products.IndexOf(item) + 1) % itemsPerPage) == 0;
    }

    public void Dispose()
    {
        Basket.PropertyChanged -= BasketChanged;
    }

}
<div class="onlyPrinting" style="width:100%">
    <header class="printPageHeader">
        <span class="smallLineDivider" />
        <div class="headerColoredBox">
            @($"{Lc.Keys["Quote"]} - {Basket.CurrentBasketName} - {DateTime.Now.Date.ToString("dd/MM/yyyy")}")
        </div>
        <span class="bigLineDivider" />
    </header>
    @* add negative margin to container - offset the empty row inserted in each header 55px *@
    <div class="printingContentContainer" style="margin-top:-55px">
        
        @if (IncludePriceTable)
        {
            <table class="print-table">
                @foreach (var item in Basket.Products)
                {
                    @* Create headers based on the items per Page , Handle Also the Case where the Last item will break the footer to the next page - break the page before the item and create a header again*@
                    @if ((Basket.Products.IndexOf(item)) % itemsPerPage == 0 
                         || Basket.Products.IndexOf(item) == 0
                         || (IsLastItemOnEndOfPage() && IsLastItem(item)))
                    {
                        @* Create an Empty Row with each header to give padding from the html header add a non breaking space in the td for mozzila to render the row otherwise it ignores it  *@
                        <tr style="@($"background-color:transparent;{((IsLastItemOnEndOfPage() && IsLastItem(item)) ? "page-break-before:always;" : "")}")"><td colspan="@(Basket.PricesEnabled ? 9 : 5)" style="height:55px">&nbsp;</td></tr>
                        <tr class="print-alternate-tr">
                            <td class="print-headerCell centeredText" style="padding:0px;">@(Lc.Keys["LineNoMin"])</td>
                            <td class="print-headerCell centeredText">@(Lc.Keys["PhotoAbbreviated"])</td>
                            <td class="print-headerCell">@(Lc.Keys["Code"])</td>
                            <td class="print-headerCell @(Basket.PricesEnabled ? "centeredText" : "")">@(Lc.Keys["Description"])</td>
                            <td class="print-headerCell centeredText">@(Lc.Keys["Pcs"])</td>
                            @if (Basket.PricesEnabled)
                            {
                                <td class="print-headerCell centeredText" style="max-width:70px">@(Lc.Keys["InitialPrice"])</td>
                                <td class="print-headerCell centeredText">@(Lc.Keys["Discount"])</td>
                                <td class="print-headerCell centeredText">
                                    @if (user.SelectedAppMode == BronzeAppMode.Retail)
                                    {
                                        @(Lc.Keys["FinalPrice"])
                                    }
                                    else
                                    {
                                        @(Lc.Keys["NetPrice"])
                                        <br/>
                                        @($"({Lc.Keys["PlusVat"]}*)")
                                    }
                                </td>
                                <td class="print-headerCell centeredText">
                                    @if (user.SelectedAppMode == BronzeAppMode.Retail)
                                    {
                                        @(Lc.Keys["FinalPrice"])
                                        <br />
                                        @(Lc.Keys["Total"])
                                    }
                                    else
                                    {
                                        @(Lc.Keys["NetPrice"])
                                        <br />
                                        @($"{Lc.Keys["Total"]}({Lc.Keys["PlusVat"]}*)")
                                    }
                                </td>
                            }
                        </tr>
                    }
                    <tr class="print-alternate-tr" style="@(GetRowPageBreakStyleOrNot(item))">
                        <td class="print-cell centeredText" style="padding:0px;">@(Basket.Products.IndexOf(item) + 1)</td>
                        <td class="print-cell">
                            <div class="imagePrint-Cell">
                                <AccessoryImagePresenter PhotoSize="@(PhotoSize.Thumbnail)"
                                                         ShownAccessoryFinishCode="@(((AccessoryPriceable)item.Priceable).SelectedFinish.Finish.Code)"
                                                         Accessory="@(((AccessoryPriceable)item.Priceable).Product)" />
                            </div>
                        </td>
                        <td class="print-cell">@(item.OveriddenCode)</td>
                        @* replace hyphen with non Breaking Hyphen u2011 *@
                        <td class="print-cell @(Basket.PricesEnabled ? "centeredText" : "")" style="@(Basket.PricesEnabled ? "max-width:110px;" : "")">@(item.OveriddenDescription.Replace("-", "\u2011"))</td>
                        <td class="print-cell centeredText">@(item.Quantity)</td>
                        @if (Basket.PricesEnabled)
                        {
                            <td class="print-cell rightText" style="max-width:70px;">@string.Format(CultureInfo.InvariantCulture, "{0:N2}€", user.SelectedAppMode == BronzeAppMode.Retail ? item.RetailPriceable.StartingPrice : item.Priceable.StartingPrice)</td>
                            <td class="print-cell centeredText">@(user.SelectedAppMode == BronzeAppMode.Retail ? $"{item.RetailPriceable.GetTotalDiscountPercent():0.00}%" : $"{item.Priceable.GetTotalDiscountPercent():0.00}%")</td>
                            <td class="print-cell rightText">@string.Format(CultureInfo.InvariantCulture, "{0:N2}€", user.SelectedAppMode == BronzeAppMode.Retail ? item.RetailPriceable.GetNetPrice() : item.Priceable.GetNetPrice())</td>
                            <td class="print-cell rightText">@string.Format(CultureInfo.InvariantCulture, "{0:N2}€", user.SelectedAppMode == BronzeAppMode.Retail ? item.RetailPriceable.GetTotalQuantityNetPrice() : item.Priceable.GetTotalQuantityNetPrice())</td>
                        }
                    </tr>

                    @if (Basket.Products.Count - 1 == Basket.Products.IndexOf(item))
                    {
                        //Generate the Footer row
                        <tr class="print-alternate-tr">
                            <td colspan="@(Basket.PricesEnabled ? "6" : "4")" class="print-footer" style="position:relative;overflow:hidden">
                                @if (!string.IsNullOrWhiteSpace(Basket.CurrentBasketNotes))
                                {
                                    <div class="notesTextContainer">
                                        @*Captures the new Lines e.t.c. and replaces them with html elements to keep formating the same - Thanks StackOverflow!*@
                                        @((MarkupString)Regex.Replace(HttpUtility.HtmlEncode($"{Lc.Keys["Notes"]}: {Basket.CurrentBasketNotes}"), "\r?\n|\r", "<br />"))
                                    </div>
                                }
                            </td>
                            <td colspan="3" class="print-footer rightText">
                                <table class="sumsTable">
                                    <tr>
                                        <td class="leftText">@($"{Lc.Keys["Quantity"]}")</td>
                                        <td>:</td>
                                        <td>@($"{Basket.Products.Sum(p => p.Quantity)}{Lc.Keys["pcs"]}")</td>
                                    </tr>
                                    @if (Basket.PricesEnabled)
                                    {
                                        <tr>
                                            <td class="leftText">@(Lc.Keys["Total"])</td>
                                            <td>:</td>
                                            <td>@(string.Format(CultureInfo.InvariantCulture, "{0:N2}€", user.SelectedAppMode == BronzeAppMode.Retail ? Basket.TotalRetailNet : Basket.TotalNet))</td>
                                        </tr>
                                    }
                                    @if (Basket.IsVatEnabled)
                                    {
                                        <tr>
                                            <td class="leftText" style="white-space:nowrap">@($"{Lc.Keys["VAT"]} ({(user.VatFactor - 1) * 100:0}%)")</td>
                                            <td>:</td>
                                            <td>@(string.Format(CultureInfo.InvariantCulture, "{0:N2}€", user.SelectedAppMode == BronzeAppMode.Retail ? Basket.TotalRetailWithVat - Basket.TotalRetailNet : Basket.TotalWithVat - Basket.TotalNet))</td>
                                        </tr>
                                        <tr>
                                            <td class="leftText" style="white-space:nowrap">@(Lc.Keys["FinalTotal"])</td>
                                            <td>:</td>
                                            <td>@(string.Format(CultureInfo.InvariantCulture, "{0:N2}€", user.SelectedAppMode == BronzeAppMode.Retail ? Basket.TotalRetailWithVat : Basket.TotalWithVat))</td>
                                        </tr>
                                    }
                                    else if(!Basket.IsVatEnabled && Basket.PricesEnabled)
                                    {
                                        <tr class="rightText" style="white-space:nowrap">
                                            <td colspan="3" style="font-style:italic;font-weight:normal">@($"*{Lc.Keys["WhereApplicable"]}")</td>
                                        </tr>
                                    }
                                </table>
                            </td>
                        </tr>
                    }
                }
            </table>
        }
        @*Add a non breaking space inside the element so that it does not get ignroed in mozzilla &nbsp;*@
        @if (IncludeSheets)
        {
            <div class="pageBreakElement" style="height:100%;">&nbsp;</div>
            @foreach (var item in Basket.Products)
            {
                @*offset the -55px of the MainContainer and apply 20px more margin*@
                <div style="margin-top:75px;width:100%;height:100%;@(Basket.Products.IndexOf(item) + 1 != Basket.Products.Count ? "page-break-after:always" : "")">
                    <AccessorySheetPrint Accessory="((AccessoryPriceable)item.Priceable).Product"
                                         SelectedFinish="((AccessoryPriceable)item.Priceable).SelectedFinish"
                                         HideFooter="@(true)"
                                         HideHeader="@(true)" />
                </div>
            }
        }
        
    </div>
    <footer class="printPageFooter">
        <span class="bigLineDivider" />
        <img class="footerLogoImage" src="../Images/Logos/BABlack.png" />
        <span class="smallLineDivider" />
    </footer>
</div>
