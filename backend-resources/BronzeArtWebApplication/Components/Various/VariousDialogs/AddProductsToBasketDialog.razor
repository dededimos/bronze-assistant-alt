@using BathAccessoriesModelsLibrary;
@using BathAccessoriesModelsLibrary.Services;
@using BronzeArtWebApplication.Pages.NewAccessoriesPage.VariousComponents
@using BronzeArtWebApplication.Shared.Services;
@using BronzeArtWebApplication.Shared.ViewModels.AccessoriesPageViewModels;
@using BronzeRulesPricelistLibrary.Models.Priceables;
@using BronzeRulesPricelistLibrary.Models.Priceables.AccessoriesPriceables;

@inject ILanguageContainerService Lc
@inject BronzeUser user
@inject BasketViewModel Basket
@inject AccessoriesUrlHelper urlHelper
@inject IMessageService messageService
@inject ISnackbar snackBar

<MudDialog Class="ma-4" Style="max-width:95vw">
    <TitleContent>
        <div style="padding-right:30px;">
            <MudText Typo="@(Typo.h6)">@(Lc.Keys["AddToQuoteBasket"])</MudText>
        </div>
    </TitleContent>
    <DialogContent>
        <div class="contentContainer">
            <div class="imagePresenterContainer">
                <AccessoryImagePresenter Accessory="@(AccessoryToAdd)"
                ShownAccessoryFinishCode="@(SelectedFinish.Finish.Code)"
                PhotoSize="@(PhotoSize.Medium)" />
            </div>
            <AccessoryFinishesSelector Finishes="@(AccessoryToAdd.AvailableFinishes)"
            @bind-SelectedFinish="@(SelectedFinish)" />
            <div id="@(QuantityInputControlId)" class="quantityContainer" tabindex="0">
                <MudNumericField T="int"
                @bind-Value="@(quantity)"
                Max="100000"
                Min="1"
                Label="@(Lc.Keys["Quantity"])"
                Margin="@(Margin.Dense)" 
                Variant="@(Variant.Outlined)"
                AdornmentText="@(Lc.Keys["pcs"])"
                Adornment="@(Adornment.End)" 
                MaxLength="6"
                Pattern="[0-9]"/>
                <div class="predefinedQuantitiesBox">
                    <MudChip T="int" Class="pa-2" Label="@(true)" Size="@(Size.Small)" Variant="@(Variant.Outlined)" Color="@(Color.Primary)" OnClick="@(()=> SetQuantity(1))">1</MudChip>
                    <MudChip T="int" Class="pa-2" Label="@(true)" Size="@(Size.Small)" Variant="@(Variant.Outlined)" Color="@(Color.Primary)" OnClick="@(()=> SetQuantity(5))">5</MudChip>
                    <MudChip T="int" Class="pa-2" Label="@(true)" Size="@(Size.Small)" Variant="@(Variant.Outlined)" Color="@(Color.Primary)" OnClick="@(()=> SetQuantity(10))">10</MudChip>
                    <MudChip T="int" Class="pa-2" Label="@(true)" Size="@(Size.Small)" Variant="@(Variant.Outlined)" Color="@(Color.Primary)" OnClick="@(()=> SetQuantity(50))">50</MudChip>
                    <MudChip T="int" Class="pa-2" Label="@(true)" Size="@(Size.Small)" Variant="@(Variant.Outlined)" Color="@(Color.Primary)" OnClick="@(()=> SetQuantity(100))">100</MudChip>
                </div>
            </div>
        </div>
    </DialogContent>
    <DialogActions>
        <div class="actionsContainer">
            <MudButton Variant="@(Variant.Outlined)"
            Color="@(Color.Primary)"
            Style="text-transform:none"
            Class="ma-4"
            OnClick="@(()=> AddToBasket())">
                @(Lc.Keys["Add"])
            </MudButton>
            <MudButton Variant="@(Variant.Outlined)"
            Color="@(Color.Primary)"
            Style="text-transform:none"
            Class="ma-4"
            OnClick="@(()=> CloseDialog())">
                @(Lc.Keys[IMessageService.DialogCancel])
            </MudButton>
        </div>
    </DialogActions>
</MudDialog>


@code {
    /// <summary>
    /// Useful to focus on with Javascript from another part of the application that opens it . (Used because MudAutoComplete Focuses itself after it sets its value)
    /// </summary>
    public const string QuantityInputControlId = "addProductQuantityControl";

    [CascadingParameter]
    public IMudDialogInstance MudDialog { get; set; }

    [Parameter]
    public BathroomAccessory AccessoryToAdd { get; set; }

    [Parameter]
    public AccessoryFinish SelectedFinish { get; set; }

    private int quantity = 1;

    private void SetQuantity(int qty)
    {
        quantity = qty;
    }

    private async Task AddToBasket()
    {
        if (AccessoryToAdd is null)
        {
            await messageService.InfoAsync("Accessory Is Null", "No Accessory Recognized to Add");
            return;
        }
        if (SelectedFinish is null)
        {
            await messageService.InfoAsync("Finish Not Selected", "No Finish Selected");
            return;
        }
        if (quantity < 1)
        {
            await messageService.InfoAsync("Invalid Quantity", "Quantity Cannot be zero '0' ");
            return;
        }
        Basket.AddAccessoryProduct(AccessoryToAdd,SelectedFinish,quantity);
        snackBar.Add(
            $"{Lc.Keys["AccessoryAddSuccess"]}<br/>{string.Join(' ', AccessoryToAdd.GetSpecificCode(SelectedFinish.Finish.Code), AccessoryToAdd.GetName())}<br/>{quantity} {Lc.Keys["pcs"]}",
            Severity.Success,
            (options) =>
            {
                options.CloseAfterNavigation = true;
                options.VisibleStateDuration = 100;
                options.HideTransitionDuration = 200;
            }
        );
        CloseDialog();
    }

    void CloseDialog() => MudDialog.Close();
}
