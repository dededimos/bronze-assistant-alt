using MirrorsModelsLibrary.Enums;
using MirrorsModelsLibrary.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

#nullable disable

namespace BronzeRulesPricelistLibrary
{
    public static class MirrorsPricelist
    {
        #region 1.Pricing Tables

        /// <summary>
        /// Holds the Price for the Dimension Pairs ( every 5cm Length-Height or Vice-Versa Does not Matter)
        /// </summary>
        private static readonly Dictionary<(int, int), decimal> CustomLightMirrorsPriceTable = new()
        {
            { (40, 40),  190m },{ (45, 40),  215m },{ (50, 40),  190m },{ (55, 40),  190m },{ (60, 40),  190m },{ (65, 40),  215m },{ (70, 40),  215m },{ (75, 40),  215m },{ (80, 40),  215m },{ (85, 40),  225m },{ (90, 40),  225m },{ (95, 40),  235m },{ (100, 40),  235m },{ (105, 40),  290m },{ (110, 40),  290m },{ (115, 40),  300m },{ (120, 40),  300m },{ (125, 40),  315m },{ (130, 40),  315m },{ (135, 40),  315m },{ (140, 40),  315m },{ (145, 40),  315m },{ (150, 40),  315m },{ (155, 40),  335m },{ (160, 40),  335m },{ (165, 40),  360m },{ (170, 40),  360m },{ (175, 40),  400m },{ (180, 40),  400m },{ (185, 40),  435m },{ (190, 40),  435m },{ (195, 40),  470m },{ (200, 40),  470m },{ (205, 40),  505m },{ (210, 40),  505m },{ (215, 40),  540m },{ (220, 40),  540m },{ (225, 40),  585m },{ (230, 40),  585m },
            { (40, 45),  190m },{ (45, 45),  215m },{ (50, 45),  190m },{ (55, 45),  190m },{ (60, 45),  215m },{ (65, 45),  225m },{ (70, 45),  225m },{ (75, 45),  235m },{ (80, 45),  235m },{ (85, 45),  245m },{ (90, 45),  245m },{ (95, 45),  260m },{ (100, 45),  260m },{ (105, 45),  290m },{ (110, 45),  290m },{ (115, 45),  300m },{ (120, 45),  300m },{ (125, 45),  315m },{ (130, 45),  315m },{ (135, 45),  315m },{ (140, 45),  315m },{ (145, 45),  315m },{ (150, 45),  335m },{ (155, 45),  335m },{ (160, 45),  360m },{ (165, 45),  360m },{ (170, 45),  400m },{ (175, 45),  400m },{ (180, 45),  435m },{ (185, 45),  435m },{ (190, 45),  470m },{ (195, 45),  470m },{ (200, 45),  505m },{ (205, 45),  505m },{ (210, 45),  540m },{ (215, 45),  540m },{ (220, 45),  585m },{ (225, 45),  585m },{ (230, 45),  620m },
            { (40, 50),  190m },{ (45, 50),  215m },{ (50, 50),  190m },{ (55, 50),  215m },{ (60, 50),  215m },{ (65, 50),  225m },{ (70, 50),  225m },{ (75, 50),  235m },{ (80, 50),  235m },{ (85, 50),  245m },{ (90, 50),  245m },{ (95, 50),  260m },{ (100, 50),  260m },{ (105, 50),  290m },{ (110, 50),  290m },{ (115, 50),  300m },{ (120, 50),  300m },{ (125, 50),  315m },{ (130, 50),  315m },{ (135, 50),  315m },{ (140, 50),  315m },{ (145, 50),  335m },{ (150, 50),  335m },{ (155, 50),  360m },{ (160, 50),  360m },{ (165, 50),  400m },{ (170, 50),  400m },{ (175, 50),  435m },{ (180, 50),  435m },{ (185, 50),  470m },{ (190, 50),  470m },{ (195, 50),  505m },{ (200, 50),  505m },{ (205, 50),  540m },{ (210, 50),  540m },{ (215, 50),  585m },{ (220, 50),  585m },{ (225, 50),  620m },{ (230, 50),  620m },
            { (40, 55),  190m },{ (45, 55),  215m },{ (50, 55),  215m },{ (55, 55),  215m },{ (60, 55),  225m },{ (65, 55),  235m },{ (70, 55),  235m },{ (75, 55),  260m },{ (80, 55),  260m },{ (85, 55),  270m },{ (90, 55),  270m },{ (95, 55),  280m },{ (100, 55),  280m },{ (105, 55),  290m },{ (110, 55),  290m },{ (115, 55),  300m },{ (120, 55),  300m },{ (125, 55),  315m },{ (130, 55),  315m },{ (135, 55),  315m },{ (140, 55),  335m },{ (145, 55),  335m },{ (150, 55),  360m },{ (155, 55),  360m },{ (160, 55),  400m },{ (165, 55),  400m },{ (170, 55),  435m },{ (175, 55),  435m },{ (180, 55),  470m },{ (185, 55),  470m },{ (190, 55),  505m },{ (195, 55),  505m },{ (200, 55),  540m },{ (205, 55),  540m },{ (210, 55),  585m },{ (215, 55),  585m },{ (220, 55),  620m },{ (225, 55),  620m },{ (230, 55),  655m },
            { (40, 60),  190m },{ (45, 60),  215m },{ (50, 60),  215m },{ (55, 60),  225m },{ (60, 60),  225m },{ (65, 60),  235m },{ (70, 60),  235m },{ (75, 60),  260m },{ (80, 60),  260m },{ (85, 60),  270m },{ (90, 60),  270m },{ (95, 60),  280m },{ (100, 60),  280m },{ (105, 60),  290m },{ (110, 60),  290m },{ (115, 60),  300m },{ (120, 60),  300m },{ (125, 60),  315m },{ (130, 60),  315m },{ (135, 60),  335m },{ (140, 60),  335m },{ (145, 60),  360m },{ (150, 60),  360m },{ (155, 60),  400m },{ (160, 60),  400m },{ (165, 60),  435m },{ (170, 60),  435m },{ (175, 60),  470m },{ (180, 60),  470m },{ (185, 60),  505m },{ (190, 60),  505m },{ (195, 60),  540m },{ (200, 60),  540m },{ (205, 60),  585m },{ (210, 60),  585m },{ (215, 60),  620m },{ (220, 60),  620m },{ (225, 60),  655m },{ (230, 60),  655m },
            { (40, 65),  215m },{ (45, 65),  225m },{ (50, 65),  225m },{ (55, 65),  235m },{ (60, 65),  235m },{ (65, 65),  260m },{ (70, 65),  260m },{ (75, 65),  270m },{ (80, 65),  270m },{ (85, 65),  280m },{ (90, 65),  280m },{ (95, 65),  290m },{ (100, 65),  290m },{ (105, 65),  315m },{ (110, 65),  315m },{ (115, 65),  325m },{ (120, 65),  325m },{ (125, 65),  335m },{ (130, 65),  335m },{ (135, 65),  335m },{ (140, 65),  360m },{ (145, 65),  360m },{ (150, 65),  400m },{ (155, 65),  400m },{ (160, 65),  435m },{ (165, 65),  435m },{ (170, 65),  470m },{ (175, 65),  470m },{ (180, 65),  505m },{ (185, 65),  505m },{ (190, 65),  540m },{ (195, 65),  540m },{ (200, 65),  585m },{ (205, 65),  585m },{ (210, 65),  620m },{ (215, 65),  620m },{ (220, 65),  655m },{ (225, 65),  655m },{ (230, 65),  690m },
            { (40, 70),  215m },{ (45, 70),  225m },{ (50, 70),  225m },{ (55, 70),  235m },{ (60, 70),  235m },{ (65, 70),  260m },{ (70, 70),  260m },{ (75, 70),  270m },{ (80, 70),  270m },{ (85, 70),  280m },{ (90, 70),  280m },{ (95, 70),  290m },{ (100, 70),  290m },{ (105, 70),  315m },{ (110, 70),  315m },{ (115, 70),  325m },{ (120, 70),  325m },{ (125, 70),  335m },{ (130, 70),  335m },{ (135, 70),  360m },{ (140, 70),  360m },{ (145, 70),  400m },{ (150, 70),  400m },{ (155, 70),  435m },{ (160, 70),  435m },{ (165, 70),  470m },{ (170, 70),  470m },{ (175, 70),  505m },{ (180, 70),  505m },{ (185, 70),  540m },{ (190, 70),  540m },{ (195, 70),  585m },{ (200, 70),  585m },{ (205, 70),  620m },{ (210, 70),  620m },{ (215, 70),  655m },{ (220, 70),  655m },{ (225, 70),  690m },{ (230, 70),  690m },
            { (40, 75),  215m },{ (45, 75),  235m },{ (50, 75),  235m },{ (55, 75),  260m },{ (60, 75),  260m },{ (65, 75),  270m },{ (70, 75),  270m },{ (75, 75),  280m },{ (80, 75),  280m },{ (85, 75),  300m },{ (90, 75),  300m },{ (95, 75),  315m },{ (100, 75),  315m },{ (105, 75),  335m },{ (110, 75),  335m },{ (115, 75),  345m },{ (120, 75),  345m },{ (125, 75),  360m },{ (130, 75),  360m },{ (135, 75),  360m },{ (140, 75),  400m },{ (145, 75),  400m },{ (150, 75),  435m },{ (155, 75),  435m },{ (160, 75),  470m },{ (165, 75),  470m },{ (170, 75),  505m },{ (175, 75),  505m },{ (180, 75),  540m },{ (185, 75),  540m },{ (190, 75),  585m },{ (195, 75),  585m },{ (200, 75),  620m },{ (205, 75),  620m },{ (210, 75),  655m },{ (215, 75),  655m },{ (220, 75),  690m },{ (225, 75),  690m },{ (230, 75),  725m },
            { (40, 80),  215m },{ (45, 80),  235m },{ (50, 80),  235m },{ (55, 80),  260m },{ (60, 80),  260m },{ (65, 80),  270m },{ (70, 80),  270m },{ (75, 80),  280m },{ (80, 80),  280m },{ (85, 80),  300m },{ (90, 80),  300m },{ (95, 80),  315m },{ (100, 80),  315m },{ (105, 80),  335m },{ (110, 80),  335m },{ (115, 80),  345m },{ (120, 80),  345m },{ (125, 80),  360m },{ (130, 80),  360m },{ (135, 80),  400m },{ (140, 80),  400m },{ (145, 80),  435m },{ (150, 80),  435m },{ (155, 80),  470m },{ (160, 80),  470m },{ (165, 80),  505m },{ (170, 80),  505m },{ (175, 80),  540m },{ (180, 80),  540m },{ (185, 80),  585m },{ (190, 80),  585m },{ (195, 80),  620m },{ (200, 80),  620m },{ (205, 80),  655m },{ (210, 80),  655m },{ (215, 80),  690m },{ (220, 80),  690m },{ (225, 80),  725m },{ (230, 80),  725m },
            { (40, 85),  225m },{ (45, 85),  245m },{ (50, 85),  245m },{ (55, 85),  270m },{ (60, 85),  270m },{ (65, 85),  280m },{ (70, 85),  280m },{ (75, 85),  300m },{ (80, 85),  300m },{ (85, 85),  325m },{ (90, 85),  325m },{ (95, 85),  335m },{ (100, 85),  335m },{ (105, 85),  360m },{ (110, 85),  360m },{ (115, 85),  380m },{ (120, 85),  380m },{ (125, 85),  400m },{ (130, 85),  400m },{ (135, 85),  400m },{ (140, 85),  435m },{ (145, 85),  435m },{ (150, 85),  470m },{ (155, 85),  470m },{ (160, 85),  505m },{ (165, 85),  505m },{ (170, 85),  540m },{ (175, 85),  540m },{ (180, 85),  585m },{ (185, 85),  585m },{ (190, 85),  620m },{ (195, 85),  620m },{ (200, 85),  655m },{ (205, 85),  655m },{ (210, 85),  690m },{ (215, 85),  690m },{ (220, 85),  725m },{ (225, 85),  725m },{ (230, 85),  760m },
            { (40, 90),  225m },{ (45, 90),  245m },{ (50, 90),  245m },{ (55, 90),  270m },{ (60, 90),  270m },{ (65, 90),  280m },{ (70, 90),  280m },{ (75, 90),  300m },{ (80, 90),  300m },{ (85, 90),  325m },{ (90, 90),  325m },{ (95, 90),  335m },{ (100, 90),  335m },{ (105, 90),  360m },{ (110, 90),  360m },{ (115, 90),  380m },{ (120, 90),  380m },{ (125, 90),  400m },{ (130, 90),  400m },{ (135, 90),  435m },{ (140, 90),  435m },{ (145, 90),  470m },{ (150, 90),  470m },{ (155, 90),  505m },{ (160, 90),  505m },{ (165, 90),  540m },{ (170, 90),  540m },{ (175, 90),  585m },{ (180, 90),  585m },{ (185, 90),  620m },{ (190, 90),  620m },{ (195, 90),  655m },{ (200, 90),  655m },{ (205, 90),  690m },{ (210, 90),  690m },{ (215, 90),  725m },{ (220, 90),  725m },{ (225, 90),  760m },{ (230, 90),  760m },
            { (40, 95),  235m },{ (45, 95),  260m },{ (50, 95),  260m },{ (55, 95),  280m },{ (60, 95),  280m },{ (65, 95),  290m },{ (70, 95),  290m },{ (75, 95),  315m },{ (80, 95),  315m },{ (85, 95),  335m },{ (90, 95),  335m },{ (95, 95),  360m },{ (100, 95),  360m },{ (105, 95),  390m },{ (110, 95),  390m },{ (115, 95),  415m },{ (120, 95),  415m },{ (125, 95),  435m },{ (130, 95),  435m },{ (135, 95),  435m },{ (140, 95),  470m },{ (145, 95),  470m },{ (150, 95),  505m },{ (155, 95),  505m },{ (160, 95),  540m },{ (165, 95),  540m },{ (170, 95),  585m },{ (175, 95),  585m },{ (180, 95),  620m },{ (185, 95),  620m },{ (190, 95),  655m },{ (195, 95),  655m },{ (200, 95),  690m },{ (205, 95),  690m },{ (210, 95),  725m },{ (215, 95),  725m },{ (220, 95),  760m },{ (225, 95),  760m },{ (230, 95),  795m },
            { (40, 100), 235m },{ (45, 100), 260m },{ (50, 100), 260m },{ (55, 100), 280m },{ (60, 100), 280m },{ (65, 100), 290m },{ (70, 100), 290m },{ (75, 100), 315m },{ (80, 100), 315m },{ (85, 100), 335m },{ (90, 100), 335m },{ (95, 100), 360m },{ (100, 100), 360m },{ (105, 100), 390m },{ (110, 100), 390m },{ (115, 100), 415m },{ (120, 100), 415m },{ (125, 100), 435m },{ (130, 100), 435m },{ (135, 100), 470m },{ (140, 100), 470m },{ (145, 100), 505m },{ (150, 100), 505m },{ (155, 100), 540m },{ (160, 100), 540m },{ (165, 100), 585m },{ (170, 100), 585m },{ (175, 100), 620m },{ (180, 100), 620m },{ (185, 100), 655m },{ (190, 100), 655m },{ (195, 100), 690m },{ (200, 100), 690m },{ (205, 100), 725m },{ (210, 100), 725m },{ (215, 100), 760m },{ (220, 100), 760m },{ (225, 100), 795m },{ (230, 100), 795m },
            { (40, 105), 290m },{ (45, 105), 290m },{ (50, 105), 290m },{ (55, 105), 290m },{ (60, 105), 290m },{ (65, 105), 315m },{ (70, 105), 315m },{ (75, 105), 335m },{ (80, 105), 335m },{ (85, 105), 360m },{ (90, 105), 360m },{ (95, 105), 390m },{ (100, 105), 390m },{ (105, 105), 415m },{ (110, 105), 415m },{ (115, 105), 435m },{ (120, 105), 435m },{ (125, 105), 470m },{ (130, 105), 470m },{ (135, 105), 470m },{ (140, 105), 505m },{ (145, 105), 505m },{ (150, 105), 540m },{ (155, 105), 540m },{ (160, 105), 585m },{ (165, 105), 585m },{ (170, 105), 620m },{ (175, 105), 620m },{ (180, 105), 655m },{ (185, 105), 655m },{ (190, 105), 690m },{ (195, 105), 690m },{ (200, 105), 725m },{ (205, 105), 725m },{ (210, 105), 760m },{ (215, 105), 760m },{ (220, 105), 795m },{ (225, 105), 795m },{ (230, 105), 830m },
            { (40, 110), 290m },{ (45, 110), 290m },{ (50, 110), 290m },{ (55, 110), 290m },{ (60, 110), 290m },{ (65, 110), 315m },{ (70, 110), 315m },{ (75, 110), 335m },{ (80, 110), 335m },{ (85, 110), 360m },{ (90, 110), 360m },{ (95, 110), 390m },{ (100, 110), 390m },{ (105, 110), 415m },{ (110, 110), 415m },{ (115, 110), 435m },{ (120, 110), 435m },{ (125, 110), 470m },{ (130, 110), 470m },{ (135, 110), 505m },{ (140, 110), 505m },{ (145, 110), 540m },{ (150, 110), 540m },{ (155, 110), 585m },{ (160, 110), 585m },{ (165, 110), 620m },{ (170, 110), 620m },{ (175, 110), 655m },{ (180, 110), 655m },{ (185, 110), 690m },{ (190, 110), 690m },{ (195, 110), 725m },{ (200, 110), 725m },{ (205, 110), 760m },{ (210, 110), 760m },{ (215, 110), 795m },{ (220, 110), 795m },{ (225, 110), 830m },{ (230, 110), 830m },
            { (40, 115), 300m },{ (45, 115), 300m },{ (50, 115), 300m },{ (55, 115), 300m },{ (60, 115), 300m },{ (65, 115), 325m },{ (70, 115), 325m },{ (75, 115), 345m },{ (80, 115), 345m },{ (85, 115), 380m },{ (90, 115), 380m },{ (95, 115), 415m },{ (100, 115), 415m },{ (105, 115), 435m },{ (110, 115), 435m },{ (115, 115), 470m },{ (120, 115), 470m },{ (125, 115), 505m },{ (130, 115), 505m },{ (135, 115), 505m },{ (140, 115), 540m },{ (145, 115), 540m },{ (150, 115), 585m },{ (155, 115), 585m },{ (160, 115), 620m },{ (165, 115), 620m },{ (170, 115), 655m },{ (175, 115), 655m },{ (180, 115), 690m },{ (185, 115), 690m },{ (190, 115), 725m },{ (195, 115), 725m },{ (200, 115), 760m },{ (205, 115), 760m },{ (210, 115), 795m },{ (215, 115), 795m },{ (220, 115), 830m },{ (225, 115), 830m },{ (230, 115), 865m },
            { (40, 120), 300m },{ (45, 120), 300m },{ (50, 120), 300m },{ (55, 120), 300m },{ (60, 120), 300m },{ (65, 120), 325m },{ (70, 120), 325m },{ (75, 120), 345m },{ (80, 120), 345m },{ (85, 120), 380m },{ (90, 120), 380m },{ (95, 120), 415m },{ (100, 120), 415m },{ (105, 120), 435m },{ (110, 120), 435m },{ (115, 120), 470m },{ (120, 120), 470m },{ (125, 120), 505m },{ (130, 120), 505m },{ (135, 120), 540m },{ (140, 120), 540m },{ (145, 120), 585m },{ (150, 120), 585m },{ (155, 120), 620m },{ (160, 120), 620m },{ (165, 120), 655m },{ (170, 120), 655m },{ (175, 120), 690m },{ (180, 120), 690m },{ (185, 120), 725m },{ (190, 120), 725m },{ (195, 120), 760m },{ (200, 120), 760m },{ (205, 120), 795m },{ (210, 120), 795m },{ (215, 120), 830m },{ (220, 120), 830m },{ (225, 120), 865m },{ (230, 120), 865m },
            { (40, 125), 315m },{ (45, 125), 315m },{ (50, 125), 315m },{ (55, 125), 315m },{ (60, 125), 315m },{ (65, 125), 335m },{ (70, 125), 335m },{ (75, 125), 360m },{ (80, 125), 360m },{ (85, 125), 400m },{ (90, 125), 400m },{ (95, 125), 435m },{ (100, 125), 435m },{ (105, 125), 470m },{ (110, 125), 470m },{ (115, 125), 505m },{ (120, 125), 505m },{ (125, 125), 540m },{ (130, 125), 540m },{ (135, 125), 540m },{ (140, 125), 585m },{ (145, 125), 585m },{ (150, 125), 620m },{ (155, 125), 620m },{ (160, 125), 655m },{ (165, 125), 655m },{ (170, 125), 690m },{ (175, 125), 690m },{ (180, 125), 725m },{ (185, 125), 725m },{ (190, 125), 760m },{ (195, 125), 760m },{ (200, 125), 795m },{ (205, 125), 795m },{ (210, 125), 830m },{ (215, 125), 830m },{ (220, 125), 865m },{ (225, 125), 865m },{ (230, 125), 900m },
            { (40, 130), 315m },{ (45, 130), 315m },{ (50, 130), 315m },{ (55, 130), 315m },{ (60, 130), 315m },{ (65, 130), 335m },{ (70, 130), 335m },{ (75, 130), 360m },{ (80, 130), 360m },{ (85, 130), 400m },{ (90, 130), 400m },{ (95, 130), 435m },{ (100, 130), 435m },{ (105, 130), 470m },{ (110, 130), 470m },{ (115, 130), 505m },{ (120, 130), 505m },{ (125, 130), 540m },{ (130, 130), 540m },{ (135, 130), 585m },{ (140, 130), 585m },{ (145, 130), 620m },{ (150, 130), 620m },{ (155, 130), 655m },{ (160, 130), 655m },{ (165, 130), 690m },{ (170, 130), 690m },{ (175, 130), 725m },{ (180, 130), 725m },{ (185, 130), 760m },{ (190, 130), 760m },{ (195, 130), 795m },{ (200, 130), 795m },{ (205, 130), 830m },{ (210, 130), 830m },{ (215, 130), 865m },{ (220, 130), 865m },{ (225, 130), 900m },{ (230, 130), 900m },
            { (40, 135), 315m },{ (45, 135), 315m },{ (50, 135), 315m },{ (55, 135), 315m },{ (60, 135), 335m },{ (65, 135), 335m },{ (70, 135), 360m },{ (75, 135), 360m },{ (80, 135), 400m },{ (85, 135), 400m },{ (90, 135), 435m },{ (95, 135), 435m },{ (100, 135), 470m },{ (105, 135), 505m },{ (110, 135), 505m },{ (115, 135), 540m },{ (120, 135), 540m },{ (125, 135), 585m },{ (130, 135), 585m },{ (135, 135), 585m },{ (140, 135), 620m },{ (145, 135), 620m },{ (150, 135), 655m },{ (155, 135), 655m },{ (160, 135), 690m },{ (165, 135), 690m },{ (170, 135), 725m },{ (175, 135), 725m },{ (180, 135), 760m },{ (185, 135), 760m },{ (190, 135), 795m },{ (195, 135), 795m },{ (200, 135), 830m },{ (205, 135), 830m },{ (210, 135), 865m },{ (215, 135), 865m },{ (220, 135), 900m },{ (225, 135), 900m },{ (230, 135), 935m },
            { (40, 140), 315m },{ (45, 140), 315m },{ (50, 140), 315m },{ (55, 140), 335m },{ (60, 140), 335m },{ (65, 140), 360m },{ (70, 140), 360m },{ (75, 140), 400m },{ (80, 140), 400m },{ (85, 140), 435m },{ (90, 140), 435m },{ (95, 140), 470m },{ (100, 140), 470m },{ (105, 140), 505m },{ (110, 140), 505m },{ (115, 140), 540m },{ (120, 140), 540m },{ (125, 140), 585m },{ (130, 140), 585m },{ (135, 140), 620m },{ (140, 140), 620m },{ (145, 140), 655m },{ (150, 140), 655m },{ (155, 140), 690m },{ (160, 140), 690m },{ (165, 140), 725m },{ (170, 140), 725m },{ (175, 140), 760m },{ (180, 140), 760m },{ (185, 140), 795m },{ (190, 140), 795m },{ (195, 140), 830m },{ (200, 140), 830m },{ (205, 140), 865m },{ (210, 140), 865m },{ (215, 140), 900m },{ (220, 140), 900m },{ (225, 140), 935m },{ (230, 140), 935m },
            { (40, 145), 315m },{ (45, 145), 315m },{ (50, 145), 335m },{ (55, 145), 335m },{ (60, 145), 360m },{ (65, 145), 360m },{ (70, 145), 400m },{ (75, 145), 400m },{ (80, 145), 435m },{ (85, 145), 435m },{ (90, 145), 470m },{ (95, 145), 470m },{ (100, 145), 505m },{ (105, 145), 540m },{ (110, 145), 540m },{ (115, 145), 585m },{ (120, 145), 585m },{ (125, 145), 620m },{ (130, 145), 620m },{ (135, 145), 620m },{ (140, 145), 655m },{ (145, 145), 655m },{ (150, 145), 690m },{ (155, 145), 690m },{ (160, 145), 725m },{ (165, 145), 725m },{ (170, 145), 760m },{ (175, 145), 760m },{ (180, 145), 795m },{ (185, 145), 795m },{ (190, 145), 830m },{ (195, 145), 830m },{ (200, 145), 865m },{ (205, 145), 865m },{ (210, 145), 900m },{ (215, 145), 900m },{ (220, 145), 935m },{ (225, 145), 935m },{ (230, 145), 970m },
            { (40, 150), 315m },{ (45, 150), 335m },{ (50, 150), 335m },{ (55, 150), 360m },{ (60, 150), 360m },{ (65, 150), 400m },{ (70, 150), 400m },{ (75, 150), 435m },{ (80, 150), 435m },{ (85, 150), 470m },{ (90, 150), 470m },{ (95, 150), 505m },{ (100, 150), 505m },{ (105, 150), 540m },{ (110, 150), 540m },{ (115, 150), 585m },{ (120, 150), 585m },{ (125, 150), 620m },{ (130, 150), 620m },{ (135, 150), 655m },{ (140, 150), 655m },{ (145, 150), 690m },{ (150, 150), 690m },{ (155, 150), 725m },{ (160, 150), 725m },{ (165, 150), 760m },{ (170, 150), 760m },{ (175, 150), 795m },{ (180, 150), 795m },{ (185, 150), 830m },{ (190, 150), 830m },{ (195, 150), 865m },{ (200, 150), 865m },{ (205, 150), 900m },{ (210, 150), 900m },{ (215, 150), 935m },{ (220, 150), 935m },{ (225, 150), 970m },{ (230, 150), 970m },
            { (40, 155), 335m },{ (45, 155), 335m },{ (50, 155), 360m },{ (55, 155), 360m },{ (60, 155), 400m },{ (65, 155), 400m },{ (70, 155), 435m },{ (75, 155), 435m },{ (80, 155), 470m },{ (85, 155), 470m },{ (90, 155), 505m },{ (95, 155), 505m },{ (100, 155), 540m },{ (105, 155), 585m },{ (110, 155), 585m },{ (115, 155), 620m },{ (120, 155), 620m },{ (125, 155), 655m },{ (130, 155), 655m },{ (135, 155), 655m },{ (140, 155), 690m },{ (145, 155), 690m },{ (150, 155), 725m },{ (155, 155), 725m },{ (160, 155), 760m },{ (165, 155), 760m },{ (170, 155), 795m },{ (175, 155), 795m },{ (180, 155), 830m },{ (185, 155), 830m },{ (190, 155), 865m },{ (195, 155), 865m },{ (200, 155), 900m },{ (205, 155), 900m },{ (210, 155), 935m },{ (215, 155), 935m },{ (220, 155), 970m },{ (225, 155), 970m },{ (230, 155),1010m },
            { (40, 160), 335m },{ (45, 160), 360m },{ (50, 160), 360m },{ (55, 160), 400m },{ (60, 160), 400m },{ (65, 160), 435m },{ (70, 160), 435m },{ (75, 160), 470m },{ (80, 160), 470m },{ (85, 160), 505m },{ (90, 160), 505m },{ (95, 160), 540m },{ (100, 160), 540m },{ (105, 160), 585m },{ (110, 160), 585m },{ (115, 160), 620m },{ (120, 160), 620m },{ (125, 160), 655m },{ (130, 160), 655m },{ (135, 160), 690m },{ (140, 160), 690m },{ (145, 160), 725m },{ (150, 160), 725m },{ (155, 160), 760m },{ (160, 160), 760m },{ (165, 160), 795m },{ (170, 160), 795m },{ (175, 160), 830m },{ (180, 160), 830m },{ (185, 160), 865m },{ (190, 160), 865m },{ (195, 160), 900m },{ (200, 160), 900m },{ (205, 160), 935m },{ (210, 160), 935m },{ (215, 160), 970m },{ (220, 160), 970m },{ (225, 160),1010m },{ (230, 160),1010m },
            { (40, 165), 360m },{ (45, 165), 360m },{ (50, 165), 400m },{ (55, 165), 400m },{ (60, 165), 435m },{ (65, 165), 435m },{ (70, 165), 470m },{ (75, 165), 470m },{ (80, 165), 505m },{ (85, 165), 505m },{ (90, 165), 540m },{ (95, 165), 540m },{ (100, 165), 585m },{ (105, 165), 620m },{ (110, 165), 620m },{ (115, 165), 655m },{ (120, 165), 655m },{ (125, 165), 690m },{ (130, 165), 690m },{ (135, 165), 690m },{ (140, 165), 725m },{ (145, 165), 725m },{ (150, 165), 760m },{ (155, 165), 760m },{ (160, 165), 795m },{ (165, 165), 795m },{ (170, 165), 830m },{ (175, 165), 830m },{ (180, 165), 865m },{ (185, 165), 865m },{ (190, 165), 900m },{ (195, 165), 900m },{ (200, 165), 935m },{ (205, 165), 935m },{ (210, 165), 970m },{ (215, 165), 970m },{ (220, 165),1010m },{ (225, 165),1010m },{ (230, 165),1045m },
            { (40, 170), 360m },{ (45, 170), 400m },{ (50, 170), 400m },{ (55, 170), 435m },{ (60, 170), 435m },{ (65, 170), 470m },{ (70, 170), 470m },{ (75, 170), 505m },{ (80, 170), 505m },{ (85, 170), 540m },{ (90, 170), 540m },{ (95, 170), 585m },{ (100, 170), 585m },{ (105, 170), 620m },{ (110, 170), 620m },{ (115, 170), 655m },{ (120, 170), 655m },{ (125, 170), 690m },{ (130, 170), 690m },{ (135, 170), 725m },{ (140, 170), 725m },{ (145, 170), 760m },{ (150, 170), 760m },{ (155, 170), 795m },{ (160, 170), 795m },{ (165, 170), 830m },{ (170, 170), 830m },{ (175, 170), 865m },{ (180, 170), 865m },{ (185, 170), 900m },{ (190, 170), 900m },{ (195, 170), 935m },{ (200, 170), 935m },{ (205, 170), 970m },{ (210, 170), 970m },{ (215, 170),1010m },{ (220, 170),1010m },{ (225, 170),1045m },{ (230, 170),1045m },
            { (40, 175), 400m },{ (45, 175), 400m },{ (50, 175), 435m },{ (55, 175), 435m },{ (60, 175), 470m },{ (65, 175), 470m },{ (70, 175), 505m },{ (75, 175), 505m },{ (80, 175), 540m },{ (85, 175), 540m },{ (90, 175), 585m },{ (95, 175), 585m },{ (100, 175), 620m },{ (105, 175), 655m },{ (110, 175), 655m },{ (115, 175), 690m },{ (120, 175), 690m },{ (125, 175), 725m },{ (130, 175), 725m },{ (135, 175), 725m },{ (140, 175), 760m },{ (145, 175), 760m },{ (150, 175), 795m },{ (155, 175), 795m },{ (160, 175), 830m },{ (165, 175), 830m },{ (170, 175), 865m },{ (175, 175), 865m },{ (180, 175), 900m },{ (185, 175), 900m },{ (190, 175), 935m },{ (195, 175), 935m },{ (200, 175), 970m },{ (205, 175), 970m },{ (210, 175),1010m },{ (215, 175),1010m },{ (220, 175),1045m },{ (225, 175),1045m },{ (230, 175),1080m },
            { (40, 180), 400m },{ (45, 180), 435m },{ (50, 180), 435m },{ (55, 180), 470m },{ (60, 180), 470m },{ (65, 180), 505m },{ (70, 180), 505m },{ (75, 180), 540m },{ (80, 180), 540m },{ (85, 180), 585m },{ (90, 180), 585m },{ (95, 180), 620m },{ (100, 180), 620m },{ (105, 180), 655m },{ (110, 180), 655m },{ (115, 180), 690m },{ (120, 180), 690m },{ (125, 180), 725m },{ (130, 180), 725m },{ (135, 180), 760m },{ (140, 180), 760m },{ (145, 180), 795m },{ (150, 180), 795m },{ (155, 180), 830m },{ (160, 180), 830m },{ (165, 180), 865m },{ (170, 180), 865m },{ (175, 180), 900m },{ (180, 180), 900m },{ (185, 180), 935m },{ (190, 180), 935m },{ (195, 180), 970m },{ (200, 180), 970m },{ (205, 180),1010m },{ (210, 180),1010m },{ (215, 180),1045m },{ (220, 180),1045m },{ (225, 180),1080m },{ (230, 180),1080m },
            { (40, 185), 435m },{ (45, 185), 435m },{ (50, 185), 470m },{ (55, 185), 470m },{ (60, 185), 505m },{ (65, 185), 505m },{ (70, 185), 540m },{ (75, 185), 540m },{ (80, 185), 585m },{ (85, 185), 585m },{ (90, 185), 620m },{ (95, 185), 620m },{ (100, 185), 655m },{ (105, 185), 690m },{ (110, 185), 690m },{ (115, 185), 725m },{ (120, 185), 725m },{ (125, 185), 760m },{ (130, 185), 760m },{ (135, 185), 760m },{ (140, 185), 795m },{ (145, 185), 795m },{ (150, 185), 830m },{ (155, 185), 830m },{ (160, 185), 865m },{ (165, 185), 865m },{ (170, 185), 900m },{ (175, 185), 900m },{ (180, 185), 935m },{ (185, 185), 935m },{ (190, 185), 970m },{ (195, 185), 970m },{ (200, 185),1010m },{ (205, 185),1010m },{ (210, 185),1045m },{ (215, 185),1045m },{ (220, 185),1080m },{ (225, 185),1080m },{ (230, 185),1115m },
            { (40, 190), 435m },{ (45, 190), 470m },{ (50, 190), 470m },{ (55, 190), 505m },{ (60, 190), 505m },{ (65, 190), 540m },{ (70, 190), 540m },{ (75, 190), 585m },{ (80, 190), 585m },{ (85, 190), 620m },{ (90, 190), 620m },{ (95, 190), 655m },{ (100, 190), 655m },{ (105, 190), 690m },{ (110, 190), 690m },{ (115, 190), 725m },{ (120, 190), 725m },{ (125, 190), 760m },{ (130, 190), 760m },{ (135, 190), 795m },{ (140, 190), 795m },{ (145, 190), 830m },{ (150, 190), 830m },{ (155, 190), 865m },{ (160, 190), 865m },{ (165, 190), 900m },{ (170, 190), 900m },{ (175, 190), 935m },{ (180, 190), 935m },{ (185, 190), 970m },{ (190, 190), 970m },{ (195, 190),1010m },{ (200, 190),1010m },{ (205, 190),1045m },{ (210, 190),1045m },{ (215, 190),1080m },{ (220, 190),1080m },{ (225, 190),1105m },{ (230, 190),1105m },
            { (40, 195), 470m },{ (45, 195), 470m },{ (50, 195), 505m },{ (55, 195), 505m },{ (60, 195), 540m },{ (65, 195), 540m },{ (70, 195), 585m },{ (75, 195), 585m },{ (80, 195), 620m },{ (85, 195), 620m },{ (90, 195), 655m },{ (95, 195), 655m },{ (100, 195), 690m },{ (105, 195), 690m },{ (110, 195), 725m },{ (115, 195), 725m },{ (120, 195), 760m },{ (125, 195), 760m },{ (130, 195), 795m },{ (135, 195), 795m },{ (140, 195), 830m },{ (145, 195), 830m },{ (150, 195), 865m },{ (155, 195), 865m },{ (160, 195), 900m },{ (165, 195), 900m },{ (170, 195), 935m },{ (175, 195), 935m },{ (180, 195), 970m },{ (185, 195), 970m },{ (190, 195),1010m },{ (195, 195),1010m },{ (200, 195),1045m },{ (205, 195),1045m },{ (210, 195),1080m },{ (215, 195),1080m },{ (220, 195),1105m },{ (225, 195),1105m },{ (230, 195),1140m },
            { (40, 200), 470m },{ (45, 200), 505m },{ (50, 200), 505m },{ (55, 200), 540m },{ (60, 200), 540m },{ (65, 200), 585m },{ (70, 200), 585m },{ (75, 200), 620m },{ (80, 200), 620m },{ (85, 200), 655m },{ (90, 200), 655m },{ (95, 200), 690m },{ (100, 200), 690m },{ (105, 200), 725m },{ (110, 200), 725m },{ (115, 200), 760m },{ (120, 200), 760m },{ (125, 200), 795m },{ (130, 200), 795m },{ (135, 200), 830m },{ (140, 200), 830m },{ (145, 200), 865m },{ (150, 200), 865m },{ (155, 200), 900m },{ (160, 200), 900m },{ (165, 200), 935m },{ (170, 200), 935m },{ (175, 200), 970m },{ (180, 200), 970m },{ (185, 200),1010m },{ (190, 200),1010m },{ (195, 200),1045m },{ (200, 200),1045m },{ (205, 200),1080m },{ (210, 200),1080m },{ (215, 200),1105m },{ (220, 200),1105m },{ (225, 200),1140m },{ (230, 200),1140m },
            { (40, 205), 505m },{ (45, 205), 505m },{ (50, 205), 540m },{ (55, 205), 540m },{ (60, 205), 585m },{ (65, 205), 585m },{ (70, 205), 620m },{ (75, 205), 620m },{ (80, 205), 655m },{ (85, 205), 655m },{ (90, 205), 690m },{ (95, 205), 690m },{ (100, 205), 725m },{ (105, 205), 725m },{ (110, 205), 760m },{ (115, 205), 760m },{ (120, 205), 795m },{ (125, 205), 795m },{ (130, 205), 830m },{ (135, 205), 830m },{ (140, 205), 865m },{ (145, 205), 865m },{ (150, 205), 900m },{ (155, 205), 900m },{ (160, 205), 935m },{ (165, 205), 935m },{ (170, 205), 970m },{ (175, 205), 970m },{ (180, 205),1010m },{ (185, 205),1010m },{ (190, 205),1045m },{ (195, 205),1045m },{ (200, 205),1080m },{ (205, 205),1080m },{ (210, 205),1105m },{ (215, 205),1105m },{ (220, 205),1140m },{ (225, 205),1140m },{ (230, 205),1175m },
            { (40, 210), 505m },{ (45, 210), 540m },{ (50, 210), 540m },{ (55, 210), 585m },{ (60, 210), 585m },{ (65, 210), 620m },{ (70, 210), 620m },{ (75, 210), 655m },{ (80, 210), 655m },{ (85, 210), 690m },{ (90, 210), 690m },{ (95, 210), 725m },{ (100, 210), 725m },{ (105, 210), 760m },{ (110, 210), 760m },{ (115, 210), 795m },{ (120, 210), 795m },{ (125, 210), 830m },{ (130, 210), 830m },{ (135, 210), 865m },{ (140, 210), 865m },{ (145, 210), 900m },{ (150, 210), 900m },{ (155, 210), 935m },{ (160, 210), 935m },{ (165, 210), 970m },{ (170, 210), 970m },{ (175, 210),1010m },{ (180, 210),1010m },{ (185, 210),1045m },{ (190, 210),1045m },{ (195, 210),1080m },{ (200, 210),1080m },{ (205, 210),1105m },{ (210, 210),1105m },{ (215, 210),1140m },{ (220, 210),1140m },{ (225, 210),1175m },{ (230, 210),1175m },
            { (40, 215), 540m },{ (45, 215), 540m },{ (50, 215), 585m },{ (55, 215), 585m },{ (60, 215), 620m },{ (65, 215), 620m },{ (70, 215), 655m },{ (75, 215), 655m },{ (80, 215), 690m },{ (85, 215), 690m },{ (90, 215), 725m },{ (95, 215), 725m },{ (100, 215), 760m },{ (105, 215), 760m },{ (110, 215), 795m },{ (115, 215), 795m },{ (120, 215), 830m },{ (125, 215), 830m },{ (130, 215), 865m },{ (135, 215), 865m },{ (140, 215), 900m },{ (145, 215), 900m },{ (150, 215), 935m },{ (155, 215), 935m },{ (160, 215), 970m },{ (165, 215), 970m },{ (170, 215),1010m },{ (175, 215),1010m },{ (180, 215),1045m },{ (185, 215),1045m },{ (190, 215),1080m },{ (195, 215),1080m },{ (200, 215),1105m },{ (205, 215),1105m },{ (210, 215),1140m },{ (215, 215),1140m },{ (220, 215),1175m },{ (225, 215),1175m },{ (230, 215),1210m },
            { (40, 220), 540m },{ (45, 220), 585m },{ (50, 220), 585m },{ (55, 220), 620m },{ (60, 220), 620m },{ (65, 220), 655m },{ (70, 220), 655m },{ (75, 220), 690m },{ (80, 220), 690m },{ (85, 220), 725m },{ (90, 220), 725m },{ (95, 220), 760m },{ (100, 220), 760m },{ (105, 220), 795m },{ (110, 220), 795m },{ (115, 220), 830m },{ (120, 220), 830m },{ (125, 220), 865m },{ (130, 220), 865m },{ (135, 220), 900m },{ (140, 220), 900m },{ (145, 220), 935m },{ (150, 220), 935m },{ (155, 220), 970m },{ (160, 220), 970m },{ (165, 220),1010m },{ (170, 220),1010m },{ (175, 220),1045m },{ (180, 220),1045m },{ (185, 220),1080m },{ (190, 220),1080m },{ (195, 220),1105m },{ (200, 220),1105m },{ (205, 220),1140m },{ (210, 220),1140m },{ (215, 220),1175m },{ (220, 220),1175m },{ (225, 220),1210m },{ (230, 220),1210m },
            { (40, 225), 585m },{ (45, 225), 585m },{ (50, 225), 620m },{ (55, 225), 620m },{ (60, 225), 655m },{ (65, 225), 655m },{ (70, 225), 690m },{ (75, 225), 690m },{ (80, 225), 725m },{ (85, 225), 725m },{ (90, 225), 760m },{ (95, 225), 760m },{ (100, 225), 795m },{ (105, 225), 795m },{ (110, 225), 830m },{ (115, 225), 830m },{ (120, 225), 865m },{ (125, 225), 865m },{ (130, 225), 900m },{ (135, 225), 900m },{ (140, 225), 935m },{ (145, 225), 935m },{ (150, 225), 970m },{ (155, 225), 970m },{ (160, 225),1010m },{ (165, 225),1010m },{ (170, 225),1045m },{ (175, 225),1045m },{ (180, 225),1080m },{ (185, 225),1080m },{ (190, 225),1105m },{ (195, 225),1105m },{ (200, 225),1140m },{ (205, 225),1140m },{ (210, 225),1175m },{ (215, 225),1175m },{ (220, 225),1210m },{ (225, 225),1210m },{ (230, 225),1245m },
            { (40, 230), 585m },{ (45, 230), 620m },{ (50, 230), 620m },{ (55, 230), 655m },{ (60, 230), 655m },{ (65, 230), 690m },{ (70, 230), 690m },{ (75, 230), 725m },{ (80, 230), 725m },{ (85, 230), 760m },{ (90, 230), 760m },{ (95, 230), 795m },{ (100, 230), 795m },{ (105, 230), 830m },{ (110, 230), 830m },{ (115, 230), 865m },{ (120, 230), 865m },{ (125, 230), 900m },{ (130, 230), 900m },{ (135, 230), 935m },{ (140, 230), 935m },{ (145, 230), 970m },{ (150, 230), 970m },{ (155, 230),1010m },{ (160, 230),1010m },{ (165, 230),1045m },{ (170, 230),1045m },{ (175, 230),1080m },{ (180, 230),1080m },{ (185, 230),1105m },{ (190, 230),1105m },{ (195, 230),1140m },{ (200, 230),1140m },{ (205, 230),1175m },{ (210, 230),1175m },{ (215, 230),1210m },{ (220, 230),1210m },{ (225, 230),1245m },{ (230, 230),1245m },
        };

        /// <summary>
        /// Holds the Price for the Dimension Pairs (Every 5cm Length-Height or Vice-Versa Does not Matter)
        /// </summary>
        private static readonly Dictionary<(int, int), decimal> CustomSimpleMirrorsPriceTable = new()
        {
            { (40, 40),  40m  },{ (45, 40),  40m  },{ (50, 40),  40m  },{ (55, 40),  45m  },{ (60, 40),  45m  },{ (65, 40),  50m  },{ (70, 40),  50m  },{ (75, 40),  55m  },{ (80, 40),  55m  },{ (85, 40),  60m  },{ (90, 40),  60m  },{ (95, 40),  75m  },{ (100, 40),  75m  },{ (105, 40),  80m  },{ (110, 40),  80m  },{ (115, 40),  85m  },{ (120, 40),  85m  },{ (160, 40),  110m },{ (185, 40),  110m },{ (230, 40),  135m },
            { (40, 45),  40m  },{ (45, 45),  45m  },{ (50, 45),  45m  },{ (55, 45),  50m  },{ (60, 45),  50m  },{ (65, 45),  60m  },{ (70, 45),  60m  },{ (75, 45),  65m  },{ (80, 45),  65m  },{ (85, 45),  70m  },{ (90, 45),  70m  },{ (95, 45),  75m  },{ (100, 45),  75m  },{ (105, 45),  80m  },{ (110, 45),  80m  },{ (115, 45),  85m  },{ (120, 45),  85m  },{ (160, 45),  110m },{ (185, 45),  120m },{ (230, 45),  145m },
            { (40, 50),  40m  },{ (45, 50),  45m  },{ (50, 50),  45m  },{ (55, 50),  50m  },{ (60, 50),  50m  },{ (65, 50),  60m  },{ (70, 50),  60m  },{ (75, 50),  65m  },{ (80, 50),  65m  },{ (85, 50),  70m  },{ (90, 50),  70m  },{ (95, 50),  75m  },{ (100, 50),  75m  },{ (105, 50),  80m  },{ (110, 50),  80m  },{ (115, 50),  85m  },{ (120, 50),  85m  },{ (160, 50),  110m },{ (185, 50),  120m },{ (230, 50),  145m },
            { (40, 55),  45m  },{ (45, 55),  50m  },{ (50, 55),  50m  },{ (55, 55),  60m  },{ (60, 55),  60m  },{ (65, 55),  70m  },{ (70, 55),  70m  },{ (75, 55),  80m  },{ (80, 55),  80m  },{ (85, 55),  85m  },{ (90, 55),  85m  },{ (95, 55),  85m  },{ (100, 55),  85m  },{ (105, 55),  90m  },{ (110, 55),  90m  },{ (115, 55),  100m },{ (120, 55),  100m },{ (160, 55),  125m },{ (185, 55),  145m },{ (230, 55),  170m },
            { (40, 60),  45m  },{ (45, 60),  50m  },{ (50, 60),  50m  },{ (55, 60),  60m  },{ (60, 60),  60m  },{ (65, 60),  70m  },{ (70, 60),  70m  },{ (75, 60),  80m  },{ (80, 60),  80m  },{ (85, 60),  85m  },{ (90, 60),  85m  },{ (95, 60),  85m  },{ (100, 60),  85m  },{ (105, 60),  90m  },{ (110, 60),  90m  },{ (115, 60),  100m },{ (120, 60),  100m },{ (160, 60),  125m },{ (185, 60),  145m },{ (230, 60),  170m },
            { (40, 65),  50m  },{ (45, 65),  60m  },{ (50, 65),  60m  },{ (55, 65),  70m  },{ (60, 65),  70m  },{ (65, 65),  80m  },{ (70, 65),  80m  },{ (75, 65),  90m  },{ (80, 65),  90m  },{ (85, 65),  95m  },{ (90, 65),  95m  },{ (95, 65),  95m  },{ (100, 65),  95m  },{ (105, 65),  105m },{ (110, 65),  105m },{ (115, 65),  115m },{ (120, 65),  115m },{ (160, 65),  145m },{ (185, 65),  170m },{ (230, 65),  200m },
            { (40, 70),  50m  },{ (45, 70),  60m  },{ (50, 70),  60m  },{ (55, 70),  70m  },{ (60, 70),  70m  },{ (65, 70),  80m  },{ (70, 70),  80m  },{ (75, 70),  90m  },{ (80, 70),  90m  },{ (85, 70),  95m  },{ (90, 70),  95m  },{ (95, 70),  95m  },{ (100, 70),  95m  },{ (105, 70),  105m },{ (110, 70),  105m },{ (115, 70),  115m },{ (120, 70),  115m },{ (160, 70),  145m },{ (185, 70),  170m },{ (230, 70),  200m },
            { (40, 75),  55m  },{ (45, 75),  65m  },{ (50, 75),  65m  },{ (55, 75),  80m  },{ (60, 75),  80m  },{ (65, 75),  90m  },{ (70, 75),  90m  },{ (75, 75),  105m },{ (80, 75),  105m },{ (85, 75),  105m },{ (90, 75),  105m },{ (95, 75),  110m },{ (100, 75),  110m },{ (105, 75),  120m },{ (110, 75),  120m },{ (115, 75),  125m },{ (120, 75),  125m },{ (160, 75),  165m },{ (185, 75),  190m },{ (230, 75),  230m },
            { (40, 80),  55m  },{ (45, 80),  65m  },{ (50, 80),  65m  },{ (55, 80),  80m  },{ (60, 80),  80m  },{ (65, 80),  90m  },{ (70, 80),  90m  },{ (75, 80),  105m },{ (80, 80),  105m },{ (85, 80),  105m },{ (90, 80),  105m },{ (95, 80),  110m },{ (100, 80),  110m },{ (105, 80),  120m },{ (110, 80),  120m },{ (115, 80),  125m },{ (120, 80),  125m },{ (160, 80),  165m },{ (185, 80),  190m },{ (230, 80),  230m },
            { (40, 85),  60m  },{ (45, 85),  70m  },{ (50, 85),  70m  },{ (55, 85),  85m  },{ (60, 85),  85m  },{ (65, 85),  95m  },{ (70, 85),  95m  },{ (75, 85),  105m },{ (80, 85),  105m },{ (85, 85),  120m },{ (90, 85),  120m },{ (95, 85),  120m },{ (100, 85),  120m },{ (105, 85),  130m },{ (110, 85),  130m },{ (115, 85),  140m },{ (120, 85),  140m },{ (160, 85),  185m },{ (185, 85),  215m },{ (230, 85),  260m },
            { (40, 90),  60m  },{ (45, 90),  70m  },{ (50, 90),  70m  },{ (55, 90),  85m  },{ (60, 90),  85m  },{ (65, 90),  95m  },{ (70, 90),  95m  },{ (75, 90),  105m },{ (80, 90),  105m },{ (85, 90),  120m },{ (90, 90),  120m },{ (95, 90),  120m },{ (100, 90),  120m },{ (105, 90),  130m },{ (110, 90),  130m },{ (115, 90),  140m },{ (120, 90),  140m },{ (160, 90),  185m },{ (185, 90),  215m },{ (230, 90),  260m },
            { (40, 95),  75m  },{ (45, 95),  75m  },{ (50, 95),  75m  },{ (55, 95),  85m  },{ (60, 95),  85m  },{ (65, 95),  95m  },{ (70, 95),  95m  },{ (75, 95),  110m },{ (80, 95),  110m },{ (85, 95),  120m },{ (90, 95),  120m },{ (95, 95),  130m },{ (100, 95),  130m },{ (105, 95),  140m },{ (110, 95),  140m },{ (115, 95),  155m },{ (120, 95),  155m },{ (160, 95),  205m },{ (185, 95),  240m },{ (230, 95),  290m },
            { (40, 100), 75m  },{ (45, 100), 75m  },{ (50, 100), 75m  },{ (55, 100), 85m  },{ (60, 100), 85m  },{ (65, 100), 95m  },{ (70, 100), 95m  },{ (75, 100), 110m },{ (80, 100), 110m },{ (85, 100), 120m },{ (90, 100), 120m },{ (95, 100), 130m },{ (100, 100), 130m },{ (105, 100), 140m },{ (110, 100), 140m },{ (115, 100), 155m },{ (120, 100), 155m },{ (160, 100), 205m },{ (185, 100), 240m },{ (230, 100), 290m },
            { (40, 105), 80m  },{ (45, 105), 80m  },{ (50, 105), 80m  },{ (55, 105), 90m  },{ (60, 105), 90m  },{ (65, 105), 105m },{ (70, 105), 105m },{ (75, 105), 120m },{ (80, 105), 120m },{ (85, 105), 130m },{ (90, 105), 130m },{ (95, 105), 140m },{ (100, 105), 140m },{ (105, 105), 155m },{ (110, 105), 155m },{ (115, 105), 175m },{ (120, 105), 175m },{ (160, 105), 225m },{ (185, 105), 265m },{ (230, 105), 315m },
            { (40, 110), 80m  },{ (45, 110), 80m  },{ (50, 110), 80m  },{ (55, 110), 90m  },{ (60, 110), 90m  },{ (65, 110), 105m },{ (70, 110), 105m },{ (75, 110), 120m },{ (80, 110), 120m },{ (85, 110), 130m },{ (90, 110), 130m },{ (95, 110), 140m },{ (100, 110), 140m },{ (105, 110), 155m },{ (110, 110), 155m },{ (115, 110), 175m },{ (120, 110), 175m },{ (160, 110), 225m },{ (185, 110), 265m },{ (230, 110), 315m },
            { (40, 115), 85m  },{ (45, 115), 85m  },{ (50, 115), 85m  },{ (55, 115), 100m },{ (60, 115), 100m },{ (65, 115), 115m },{ (70, 115), 115m },{ (75, 115), 125m },{ (80, 115), 125m },{ (85, 115), 140m },{ (90, 115), 140m },{ (95, 115), 155m },{ (100, 115), 155m },{ (105, 115), 175m },{ (110, 115), 175m },{ (115, 115), 195m },{ (120, 115), 195m },{ (160, 115), 245m },{ (185, 115), 290m },{ (230, 115), 340m },
            { (40, 120), 85m  },{ (45, 120), 85m  },{ (50, 120), 85m  },{ (55, 120), 100m },{ (60, 120), 100m },{ (65, 120), 115m },{ (70, 120), 115m },{ (75, 120), 125m },{ (80, 120), 125m },{ (85, 120), 140m },{ (90, 120), 140m },{ (95, 120), 155m },{ (100, 120), 155m },{ (105, 120), 175m },{ (110, 120), 175m },{ (115, 120), 195m },{ (120, 120), 195m },{ (160, 120), 245m },{ (185, 120), 290m },{ (230, 120), 340m },
            { (40, 160), 110m },{ (45, 160), 110m },{ (50, 160), 110m },{ (55, 160), 125m },{ (60, 160), 125m },{ (65, 160), 145m },{ (70, 160), 145m },{ (75, 160), 165m },{ (80, 160), 165m },{ (85, 160), 185m },{ (90, 160), 185m },{ (95, 160), 205m },{ (100, 160), 205m },{ (105, 160), 225m },{ (110, 160), 225m },{ (115, 160), 245m },{ (120, 160), 245m },{ (160, 160), 265m },{ (185, 160), 315m },{ (230, 160), 360m },
            { (40, 185), 110m },{ (45, 185), 120m },{ (50, 185), 120m },{ (55, 185), 145m },{ (60, 185), 145m },{ (65, 185), 170m },{ (70, 185), 170m },{ (75, 185), 190m },{ (80, 185), 190m },{ (85, 185), 215m },{ (90, 185), 215m },{ (95, 185), 240m },{ (100, 185), 240m },{ (105, 185), 265m },{ (110, 185), 265m },{ (115, 185), 290m },{ (120, 185), 290m },{ (160, 185), 315m },{ (185, 185), 360m },{ (230, 185), 390m },
            { (40, 230), 135m },{ (45, 230), 145m },{ (50, 230), 145m },{ (55, 230), 170m },{ (60, 230), 170m },{ (65, 230), 200m },{ (70, 230), 200m },{ (75, 230), 230m },{ (80, 230), 230m },{ (85, 230), 260m },{ (90, 230), 260m },{ (95, 230), 290m },{ (100, 230), 290m },{ (105, 230), 315m },{ (110, 230), 315m },{ (115, 230), 340m },{ (120, 230), 340m },{ (160, 230), 360m },{ (185, 230), 390m },{ (230, 230), 410m },
        };

        /// <summary>
        /// PAINTED FRAMES Holds the Price for the Dimension Pairs (Every 10cm Length-Height or Vice Versa DoesNot Matter
        /// </summary>
        private static readonly Dictionary<(int, int), decimal> FramesPaintedPriceTable = new()
        {
            { (40, 40),   80m  },{ (50, 40),   80m  },{ (60, 40),   90m  },{ (70, 40),  105m  },{ (80, 40),  110m  },{ (90, 40),  120m  },{ (100, 40),  130m  },{ (110, 40),  130m  },{ (120, 40),  135m  },{ (130, 40),  185m  },{ (140, 40),  185m  },{ (150, 40),  185m  },{ (160, 40),  185m  },{ (170, 40),  190m  },{ (180, 40),  190m  },{ (190, 40),  200m  },{ (200, 40),  210m  },{ (210, 40),  220m  },{ (220, 40),  230m  },{ (230, 40),  240m  },
            { (40, 50),   80m  },{ (50, 50),   90m  },{ (60, 50),   95m  },{ (70, 50),  110m  },{ (80, 50),  120m  },{ (90, 50),  125m  },{ (100, 50),  130m  },{ (110, 50),  130m  },{ (120, 50),  135m  },{ (130, 50),  185m  },{ (140, 50),  185m  },{ (150, 50),  185m  },{ (160, 50),  185m  },{ (170, 50),  190m  },{ (180, 50),  190m  },{ (190, 50),  200m  },{ (200, 50),  210m  },{ (210, 50),  220m  },{ (220, 50),  230m  },{ (230, 50),  240m  },
            { (40, 60),   90m  },{ (50, 60),   95m  },{ (60, 60),  110m  },{ (70, 60),  120m  },{ (80, 60),  125m  },{ (90, 60),  130m  },{ (100, 60),  130m  },{ (110, 60),  135m  },{ (120, 60),  140m  },{ (130, 60),  190m  },{ (140, 60),  190m  },{ (150, 60),  190m  },{ (160, 60),  190m  },{ (170, 60),  200m  },{ (180, 60),  200m  },{ (190, 60),  210m  },{ (200, 60),  220m  },{ (210, 60),  230m  },{ (220, 60),  240m  },{ (230, 60),  250m  },
            { (40, 70),  105m  },{ (50, 70),  110m  },{ (60, 70),  120m  },{ (70, 70),  125m  },{ (80, 70),  130m  },{ (90, 70),  130m  },{ (100, 70),  135m  },{ (110, 70),  140m  },{ (120, 70),  145m  },{ (130, 70),  190m  },{ (140, 70),  190m  },{ (150, 70),  190m  },{ (160, 70),  190m  },{ (170, 70),  200m  },{ (180, 70),  200m  },{ (190, 70),  210m  },{ (200, 70),  220m  },{ (210, 70),  230m  },{ (220, 70),  240m  },{ (230, 70),  250m  },
            { (40, 80),  110m  },{ (50, 80),  120m  },{ (60, 80),  125m  },{ (70, 80),  130m  },{ (80, 80),  130m  },{ (90, 80),  135m  },{ (100, 80),  140m  },{ (110, 80),  145m  },{ (120, 80),  150m  },{ (130, 80),  200m  },{ (140, 80),  200m  },{ (150, 80),  200m  },{ (160, 80),  200m  },{ (170, 80),  205m  },{ (180, 80),  205m  },{ (190, 80),  220m  },{ (200, 80),  230m  },{ (210, 80),  240m  },{ (220, 80),  250m  },{ (230, 80),  260m  },
            { (40, 90),  120m  },{ (50, 90),  125m  },{ (60, 90),  130m  },{ (70, 90),  130m  },{ (80, 90),  135m  },{ (90, 90),  140m  },{ (100, 90),  145m  },{ (110, 90),  150m  },{ (120, 90),  160m  },{ (130, 90),  200m  },{ (140, 90),  200m  },{ (150, 90),  200m  },{ (160, 90),  200m  },{ (170, 90),  215m  },{ (180, 90),  215m  },{ (190, 90),  230m  },{ (200, 90),  240m  },{ (210, 90),  250m  },{ (220, 90),  260m  },{ (230, 90),  270m  },
            { (40,100),  130m  },{ (50,100),  130m  },{ (60,100),  130m  },{ (70,100),  135m  },{ (80,100),  140m  },{ (90,100),  145m  },{ (100,100),  150m  },{ (110,100),  155m  },{ (120,100),  160m  },{ (130,100),  210m  },{ (140,100),  210m  },{ (150,100),  210m  },{ (160,100),  210m  },{ (170,100),  225m  },{ (180,100),  225m  },{ (190,100),  240m  },{ (200,100),  250m  },{ (210,100),  260m  },{ (220,100),  270m  },{ (230,100),  280m  },
            { (40,110),  130m  },{ (50,110),  130m  },{ (60,110),  135m  },{ (70,110),  140m  },{ (80,110),  145m  },{ (90,110),  150m  },{ (100,110),  155m  },{ (110,110),  160m  },{ (120,110),  165m  },{ (130,110),  220m  },{ (140,110),  220m  },{ (150,110),  220m  },{ (160,110),  220m  },{ (170,110),  235m  },{ (180,110),  235m  },{ (190,110),  250m  },{ (200,110),  260m  },{ (210,110),  270m  },{ (220,110),  280m  },{ (230,110),  290m  },
            { (40,120),  135m  },{ (50,120),  135m  },{ (60,120),  140m  },{ (70,120),  145m  },{ (80,120),  150m  },{ (90,120),  160m  },{ (100,120),  170m  },{ (110,120),  180m  },{ (120,120),  190m  },{ (130,120),  230m  },{ (140,120),  230m  },{ (150,120),  230m  },{ (160,120),  230m  },{ (170,120),  245m  },{ (180,120),  245m  },{ (190,120),  260m  },{ (200,120),  270m  },{ (210,120),  280m  },{ (220,120),  290m  },{ (230,120),  300m  },
            { (40,130),  185m  },{ (50,130),  185m  },{ (60,130),  190m  },{ (70,130),  190m  },{ (80,130),  200m  },{ (90,130),  200m  },{ (100,130),  210m  },{ (110,130),  220m  },{ (120,130),  230m  },{ (130,130),  270m  },{ (140,130),  270m  },{ (150,130),  270m  },{ (160,130),  270m  },{ (170,130),  285m  },{ (180,130),  285m  },{ (190,130),  300m  },{ (200,130),  310m  },{ (210,130),  320m  },{ (220,130),  330m  },{ (230,130),  340m  },
            { (40,140),  185m  },{ (50,140),  185m  },{ (60,140),  190m  },{ (70,140),  190m  },{ (80,140),  200m  },{ (90,140),  200m  },{ (100,140),  210m  },{ (110,140),  220m  },{ (120,140),  230m  },{ (130,140),  270m  },{ (140,140),  270m  },{ (150,140),  270m  },{ (160,140),  270m  },{ (170,140),  285m  },{ (180,140),  285m  },{ (190,140),  300m  },{ (200,140),  310m  },{ (210,140),  320m  },{ (220,140),  330m  },{ (230,140),  340m  },
            { (40,150),  185m  },{ (50,150),  185m  },{ (60,150),  190m  },{ (70,150),  190m  },{ (80,150),  200m  },{ (90,150),  200m  },{ (100,150),  210m  },{ (110,150),  220m  },{ (120,150),  230m  },{ (130,150),  270m  },{ (140,150),  270m  },{ (150,150),  270m  },{ (160,150),  270m  },{ (170,150),  285m  },{ (180,150),  285m  },{ (190,150),  300m  },{ (200,150),  310m  },{ (210,150),  320m  },{ (220,150),  330m  },{ (230,150),  340m  },
            { (40,160),  185m  },{ (50,160),  185m  },{ (60,160),  190m  },{ (70,160),  190m  },{ (80,160),  200m  },{ (90,160),  200m  },{ (100,160),  210m  },{ (110,160),  220m  },{ (120,160),  230m  },{ (130,160),  270m  },{ (140,160),  270m  },{ (150,160),  270m  },{ (160,160),  270m  },{ (170,160),  285m  },{ (180,160),  285m  },{ (190,160),  300m  },{ (200,160),  310m  },{ (210,160),  320m  },{ (220,160),  330m  },{ (230,160),  340m  },
            { (40,170),  190m  },{ (50,170),  190m  },{ (60,170),  200m  },{ (70,170),  200m  },{ (80,170),  205m  },{ (90,170),  215m  },{ (100,170),  225m  },{ (110,170),  235m  },{ (120,170),  245m  },{ (130,170),  285m  },{ (140,170),  285m  },{ (150,170),  285m  },{ (160,170),  285m  },{ (170,170),  300m  },{ (180,170),  300m  },{ (190,170),  310m  },{ (200,170),  320m  },{ (210,170),  330m  },{ (220,170),  340m  },{ (230,170),  350m  },
            { (40,180),  190m  },{ (50,180),  190m  },{ (60,180),  200m  },{ (70,180),  200m  },{ (80,180),  205m  },{ (90,180),  215m  },{ (100,180),  225m  },{ (110,180),  235m  },{ (120,180),  245m  },{ (130,180),  285m  },{ (140,180),  285m  },{ (150,180),  285m  },{ (160,180),  285m  },{ (170,180),  300m  },{ (180,180),  300m  },{ (190,180),  310m  },{ (200,180),  320m  },{ (210,180),  330m  },{ (220,180),  340m  },{ (230,180),  350m  },
            { (40,190),  200m  },{ (50,190),  200m  },{ (60,190),  210m  },{ (70,190),  210m  },{ (80,190),  220m  },{ (90,190),  230m  },{ (100,190),  240m  },{ (110,190),  250m  },{ (120,190),  260m  },{ (130,190),  300m  },{ (140,190),  300m  },{ (150,190),  300m  },{ (160,190),  300m  },{ (170,190),  310m  },{ (180,190),  310m  },{ (190,190),  320m  },{ (200,190),  330m  },{ (210,190),  340m  },{ (220,190),  350m  },{ (230,190),  360m  },
            { (40,200),  210m  },{ (50,200),  210m  },{ (60,200),  220m  },{ (70,200),  220m  },{ (80,200),  230m  },{ (90,200),  240m  },{ (100,200),  250m  },{ (110,200),  260m  },{ (120,200),  270m  },{ (130,200),  310m  },{ (140,200),  310m  },{ (150,200),  310m  },{ (160,200),  310m  },{ (170,200),  320m  },{ (180,200),  320m  },{ (190,200),  330m  },{ (200,200),  340m  },{ (210,200),  350m  },{ (220,200),  360m  },{ (230,200),  370m  },
            { (40,210),  220m  },{ (50,210),  220m  },{ (60,210),  230m  },{ (70,210),  230m  },{ (80,210),  240m  },{ (90,210),  250m  },{ (100,210),  260m  },{ (110,210),  270m  },{ (120,210),  280m  },{ (130,210),  320m  },{ (140,210),  320m  },{ (150,210),  320m  },{ (160,210),  320m  },{ (170,210),  330m  },{ (180,210),  330m  },{ (190,210),  340m  },{ (200,210),  350m  },{ (210,210),  360m  },{ (220,210),  370m  },{ (230,210),  380m  },
            { (40,220),  230m  },{ (50,220),  230m  },{ (60,220),  240m  },{ (70,220),  240m  },{ (80,220),  250m  },{ (90,220),  260m  },{ (100,220),  270m  },{ (110,220),  280m  },{ (120,220),  290m  },{ (130,220),  330m  },{ (140,220),  330m  },{ (150,220),  330m  },{ (160,220),  330m  },{ (170,220),  340m  },{ (180,220),  340m  },{ (190,220),  350m  },{ (200,220),  360m  },{ (210,220),  370m  },{ (220,220),  380m  },{ (230,220),  390m  },
            { (40,230),  240m  },{ (50,230),  240m  },{ (60,230),  250m  },{ (70,230),  250m  },{ (80,230),  260m  },{ (90,230),  270m  },{ (100,230),  280m  },{ (110,230),  290m  },{ (120,230),  300m  },{ (130,230),  340m  },{ (140,230),  340m  },{ (150,230),  340m  },{ (160,230),  340m  },{ (170,230),  350m  },{ (180,230),  350m  },{ (190,230),  360m  },{ (200,230),  370m  },{ (210,230),  380m  },{ (220,230),  390m  },{ (230,230),  400m  },
        };

        /// <summary>
        /// PLATED FRAMES Holds the Price for the Dimension Pairs (Every 10cm Length-Height or Vice Versa DoesNot Matter
        /// </summary>
        private static readonly Dictionary<(int, int), decimal> FramesPlatedPriceTable = new()
        {
            { (40, 40),  133m  },{ (50, 40),  133m  },{ (60, 40),  147m  },{ (70, 40),  175m  },{ (80, 40),  182m  },{ (90, 40),  196m  },{ (100, 40),  203m  },{ (110, 40),  210m  },{ (120, 40),  217m  },{ (130, 40),  224m  },{ (140, 40),  301m  },{ (150, 40),  301m  },{ (160, 40),  301m  },{ (170, 40),  301m  },{ (180, 40),  315m  },{ (190, 40),  315m  },{ (200, 40),  330m  },{ (210, 40),  345m  },{ (220, 40),  360m  },{ (230, 40),  375m  },
            { (40, 50),  133m  },{ (50, 50),  147m  },{ (60, 50),  154m  },{ (70, 50),  182m  },{ (80, 50),  196m  },{ (90, 50),  203m  },{ (100, 50),  210m  },{ (110, 50),  217m  },{ (120, 50),  224m  },{ (130, 50),  301m  },{ (140, 50),  301m  },{ (150, 50),  301m  },{ (160, 50),  301m  },{ (170, 50),  315m  },{ (180, 50),  315m  },{ (190, 50),  330m  },{ (200, 50),  345m  },{ (210, 50),  360m  },{ (220, 50),  375m  },{ (230, 50),  390m  },
            { (40, 60),  147m  },{ (50, 60),  154m  },{ (60, 60),  182m  },{ (70, 60),  196m  },{ (80, 60),  203m  },{ (90, 60),  210m  },{ (100, 60),  217m  },{ (110, 60),  224m  },{ (120, 60),  231m  },{ (130, 60),  308m  },{ (140, 60),  308m  },{ (150, 60),  308m  },{ (160, 60),  308m  },{ (170, 60),  322m  },{ (180, 60),  322m  },{ (190, 60),  340m  },{ (200, 60),  355m  },{ (210, 60),  370m  },{ (220, 60),  385m  },{ (230, 60),  400m  },
            { (40, 70),  175m  },{ (50, 70),  182m  },{ (60, 70),  196m  },{ (70, 70),  203m  },{ (80, 70),  210m  },{ (90, 70),  217m  },{ (100, 70),  224m  },{ (110, 70),  231m  },{ (120, 70),  238m  },{ (130, 70),  315m  },{ (140, 70),  315m  },{ (150, 70),  315m  },{ (160, 70),  315m  },{ (170, 70),  329m  },{ (180, 70),  329m  },{ (190, 70),  350m  },{ (200, 70),  365m  },{ (210, 70),  380m  },{ (220, 70),  395m  },{ (230, 70),  410m  },
            { (40, 80),  182m  },{ (50, 80),  196m  },{ (60, 80),  203m  },{ (70, 80),  210m  },{ (80, 80),  217m  },{ (90, 80),  224m  },{ (100, 80),  231m  },{ (110, 80),  238m  },{ (120, 80),  245m  },{ (130, 80),  322m  },{ (140, 80),  322m  },{ (150, 80),  322m  },{ (160, 80),  322m  },{ (170, 80),  336m  },{ (180, 80),  336m  },{ (190, 80),  360m  },{ (200, 80),  375m  },{ (210, 80),  390m  },{ (220, 80),  405m  },{ (230, 80),  420m  },
            { (40, 90),  196m  },{ (50, 90),  203m  },{ (60, 90),  210m  },{ (70, 90),  217m  },{ (80, 90),  224m  },{ (90, 90),  231m  },{ (100, 90),  238m  },{ (110, 90),  245m  },{ (120, 90),  259m  },{ (130, 90),  329m  },{ (140, 90),  329m  },{ (150, 90),  329m  },{ (160, 90),  329m  },{ (170, 90),  350m  },{ (180, 90),  350m  },{ (190, 90),  370m  },{ (200, 90),  385m  },{ (210, 90),  400m  },{ (220, 90),  415m  },{ (230, 90),  430m  },
            
            { (40,100),  203m  },{ (50,100),  210m  },{ (60,100),  217m  },{ (70,100),  224m  },{ (80,100),  231m  },{ (90,100),  238m  },{ (100,100),  250m  },{ (110,100),  260m  },{ (120,100),  270m  },{ (130,100),  280m  },{ (140,100),  290m  },{ (150,100),  300m  },{ (160,100),  310m  },{ (170,100),  320m  },{ (180,100),  330m  },{ (190,100),  340m  },{ (200,100),  350m  },{ (210,100),  360m  },{ (220,100),  370m  },{ (230,100),  380m  },
            { (40,110),  210m  },{ (50,110),  217m  },{ (60,110),  224m  },{ (70,110),  231m  },{ (80,110),  238m  },{ (90,110),  245m  },{ (100,110),  260m  },{ (110,110),  270m  },{ (120,110),  280m  },{ (130,110),  290m  },{ (140,110),  300m  },{ (150,110),  310m  },{ (160,110),  320m  },{ (170,110),  330m  },{ (180,110),  340m  },{ (190,110),  350m  },{ (200,110),  360m  },{ (210,110),  370m  },{ (220,110),  380m  },{ (230,110),  390m  },
            { (40,120),  217m  },{ (50,120),  224m  },{ (60,120),  231m  },{ (70,120),  238m  },{ (80,120),  245m  },{ (90,120),  259m  },{ (100,120),  270m  },{ (110,120),  280m  },{ (120,120),  290m  },{ (130,120),  300m  },{ (140,120),  310m  },{ (150,120),  320m  },{ (160,120),  330m  },{ (170,120),  340m  },{ (180,120),  350m  },{ (190,120),  360m  },{ (200,120),  370m  },{ (210,120),  380m  },{ (220,120),  390m  },{ (230,120),  400m  },
            { (40,130),  224m  },{ (50,130),  301m  },{ (60,130),  308m  },{ (70,130),  315m  },{ (80,130),  322m  },{ (90,130),  329m  },{ (100,130),  340m  },{ (110,130),  350m  },{ (120,130),  360m  },{ (130,130),  370m  },{ (140,130),  380m  },{ (150,130),  390m  },{ (160,130),  400m  },{ (170,130),  410m  },{ (180,130),  420m  },{ (190,130),  430m  },{ (200,130),  440m  },{ (210,130),  450m  },{ (220,130),  460m  },{ (230,130),  470m  },
            { (40,140),  301m  },{ (50,140),  301m  },{ (60,140),  308m  },{ (70,140),  315m  },{ (80,140),  322m  },{ (90,140),  329m  },{ (100,140),  340m  },{ (110,140),  350m  },{ (120,140),  360m  },{ (130,140),  370m  },{ (140,140),  380m  },{ (150,140),  390m  },{ (160,140),  400m  },{ (170,140),  410m  },{ (180,140),  420m  },{ (190,140),  430m  },{ (200,140),  440m  },{ (210,140),  450m  },{ (220,140),  460m  },{ (230,140),  470m  },
            { (40,150),  301m  },{ (50,150),  301m  },{ (60,150),  308m  },{ (70,150),  315m  },{ (80,150),  322m  },{ (90,150),  329m  },{ (100,150),  340m  },{ (110,150),  350m  },{ (120,150),  360m  },{ (130,150),  370m  },{ (140,150),  380m  },{ (150,150),  390m  },{ (160,150),  400m  },{ (170,150),  410m  },{ (180,150),  420m  },{ (190,150),  430m  },{ (200,150),  440m  },{ (210,150),  450m  },{ (220,150),  460m  },{ (230,150),  470m  },
            { (40,160),  301m  },{ (50,160),  301m  },{ (60,160),  308m  },{ (70,160),  315m  },{ (80,160),  322m  },{ (90,160),  329m  },{ (100,160),  340m  },{ (110,160),  350m  },{ (120,160),  360m  },{ (130,160),  370m  },{ (140,160),  380m  },{ (150,160),  390m  },{ (160,160),  400m  },{ (170,160),  410m  },{ (180,160),  420m  },{ (190,160),  430m  },{ (200,160),  440m  },{ (210,160),  450m  },{ (220,160),  460m  },{ (230,160),  470m  },
            { (40,170),  301m  },{ (50,170),  315m  },{ (60,170),  322m  },{ (70,170),  329m  },{ (80,170),  336m  },{ (90,170),  350m  },{ (100,170),  360m  },{ (110,170),  370m  },{ (120,170),  380m  },{ (130,170),  390m  },{ (140,170),  400m  },{ (150,170),  410m  },{ (160,170),  420m  },{ (170,170),  430m  },{ (180,170),  440m  },{ (190,170),  450m  },{ (200,170),  460m  },{ (210,170),  470m  },{ (220,170),  480m  },{ (230,170),  490m  },
            { (40,180),  315m  },{ (50,180),  315m  },{ (60,180),  322m  },{ (70,180),  329m  },{ (80,180),  336m  },{ (90,180),  350m  },{ (100,180),  360m  },{ (110,180),  370m  },{ (120,180),  380m  },{ (130,180),  390m  },{ (140,180),  400m  },{ (150,180),  410m  },{ (160,180),  420m  },{ (170,180),  430m  },{ (180,180),  440m  },{ (190,180),  450m  },{ (200,180),  460m  },{ (210,180),  470m  },{ (220,180),  480m  },{ (230,180),  490m  },
            { (40,190),  315m  },{ (50,190),  330m  },{ (60,190),  340m  },{ (70,190),  350m  },{ (80,190),  360m  },{ (90,190),  370m  },{ (100,190),  380m  },{ (110,190),  390m  },{ (120,190),  400m  },{ (130,190),  410m  },{ (140,190),  420m  },{ (150,190),  430m  },{ (160,190),  440m  },{ (170,190),  450m  },{ (180,190),  460m  },{ (190,190),  470m  },{ (200,190),  480m  },{ (210,190),  490m  },{ (220,190),  500m  },{ (230,190),  510m  },
            { (40,200),  330m  },{ (50,200),  345m  },{ (60,200),  355m  },{ (70,200),  365m  },{ (80,200),  375m  },{ (90,200),  385m  },{ (100,200),  395m  },{ (110,200),  405m  },{ (120,200),  415m  },{ (130,200),  425m  },{ (140,200),  435m  },{ (150,200),  445m  },{ (160,200),  455m  },{ (170,200),  465m  },{ (180,200),  475m  },{ (190,200),  485m  },{ (200,200),  495m  },{ (210,200),  505m  },{ (220,200),  515m  },{ (230,200),  525m  },
            { (40,210),  345m  },{ (50,210),  360m  },{ (60,210),  370m  },{ (70,210),  380m  },{ (80,210),  390m  },{ (90,210),  400m  },{ (100,210),  410m  },{ (110,210),  420m  },{ (120,210),  430m  },{ (130,210),  440m  },{ (140,210),  450m  },{ (150,210),  460m  },{ (160,210),  470m  },{ (170,210),  480m  },{ (180,210),  490m  },{ (190,210),  500m  },{ (200,210),  510m  },{ (210,210),  520m  },{ (220,210),  530m  },{ (230,210),  540m  },
            { (40,220),  360m  },{ (50,220),  375m  },{ (60,220),  385m  },{ (70,220),  395m  },{ (80,220),  405m  },{ (90,220),  415m  },{ (100,220),  425m  },{ (110,220),  435m  },{ (120,220),  445m  },{ (130,220),  455m  },{ (140,220),  465m  },{ (150,220),  475m  },{ (160,220),  485m  },{ (170,220),  495m  },{ (180,220),  505m  },{ (190,220),  515m  },{ (200,220),  525m  },{ (210,220),  535m  },{ (220,220),  545m  },{ (230,220),  555m  },
            { (40,230),  375m  },{ (50,230),  390m  },{ (60,230),  400m  },{ (70,230),  410m  },{ (80,230),  420m  },{ (90,230),  430m  },{ (100,230),  440m  },{ (110,230),  450m  },{ (120,230),  460m  },{ (130,230),  470m  },{ (140,230),  480m  },{ (150,230),  490m  },{ (160,230),  500m  },{ (170,230),  510m  },{ (180,230),  520m  },{ (190,230),  530m  },{ (200,230),  540m  },{ (210,230),  550m  },{ (220,230),  560m  },{ (230,230),  570m  },
        };

        /// <summary>
        /// The Price of the Prefabricated Mirrors in the Catalogue -- Key:Code , Value:Price
        /// </summary>
        private static readonly Dictionary<string, decimal> CatalogueMirrorsPricing = new()
        {
            { "60M3-90-704L"  , 204m },
            { "60M3-90-704LM3", 294m },
            { "60M3-90-653LCT", 243m },

            { "6000-60-804"  , 275m },
            { "6000-75-553"  , 160m },
            { "6000-75-553LT", 199m },
            { "6000-90-653LT", 235m },
            { "6000-75-55DLT", 207m },
            { "6000-90-65DLT", 243m },
            { "6000-90-70"   , 200m },

            { "60X4-55-754"  , 160m },
            { "60X4-65-904"  , 196m },
            { "60X4-70-1204L", 244m },
            { "60X4-65-904LF", 230m },
            { "60X4-75-554"  , 160m },
            { "60X4-90-704"  , 226m },
            { "60X4-120-80DL", 335m },
            { "60X4-75-553ST", 234m },
            { "60X4-75-55DST", 242m },
            { "60X4-90-704M3", 316m },

            { "60X6-55-754"  , 160m },
            { "60X6-70-904"  , 226m },
            { "60X6-80-120DL", 335m },
            { "60X6-70-904M3", 316m },
            { "60X6-75-554"  , 160m },
            { "60X6-90-654"  , 196m },
            { "60X6-120-704L", 244m },
            { "60X6-75-553LT", 234m },
            { "60X6-75-55DLT", 242m },
            { "60X6-90-65DLT", 278m },
            { "60X6-90-654LF", 230m },

            { "60H8-55-754"    , 158m },
            { "60H8-65-904"    , 189m },
            { "60H8-70-1204"   , 234m },
            { "60H8-70-120DLM3", 368m },
            { "60H8-75-554"    , 158m },
            { "60H8-90-654"    , 189m },
            { "60H8-120-704"   , 234m },
            { "60H8-120-70DLM3", 368m },

            { "60H7-50-704"    , 144m },
            { "60H7-55-754"    , 155m },
            { "60H7-55-854S"   , 181m },
            { "60H7-70-704"    , 155m },
            { "60H7-80-804"    , 190m },
            { "60H7-65-904"    , 181m },
            { "60H7-70-1004"   , 205m },
            { "60H7-80-1104L"  , 236m },
            { "60H7-70-1204"   , 226m },
            { "60H7-70-1204S"  , 226m },
            { "60H7-80-1204L"  , 245m },
            { "60H7-80-120DL"  , 255m },
            { "60H7-80-1404L"  , 298m },

            { "60H7-70-504"    , 144m },
            { "60H7-75-554"    , 155m },
            { "60H7-90-654"    , 181m },
            { "60H7-95-354"    , 181m },
            { "60H7-100-704"   , 205m },
            { "60H7-110-804L"  , 236m },
            { "60H7-120-704"   , 226m },
            { "60H7-120-704S"  , 226m },
            { "60H7-120-704L"  , 226m },
            { "60H7-120-704LM3", 316m },
            { "60H7-120-804L"  , 245m },
            { "60H7-120-80DL"  , 255m },
            { "60H7-140-804L"  , 298m },

            { "60N9-50-504"    , 132m },
            { "60N9-60-604"    , 132m },
            { "60N9-70-704"    , 161m },
            { "60N9-80-804"    , 188m },
            { "60N9-90-904"    , 240m },
            { "60N9-100-1004"  , 318m },
            { "60N9-110-1104"  , 369m },
            { "60N9-120-1204"  , 419m },
            { "60N9-130-1304"  , 485m },
            { "60N9-60-60DM3"  , 237m },
            { "60N9-70-70DM3"  , 266m },
            { "60N9-80-80DM3"  , 293m },

            { "60N7-60-604"    , 144m },
            { "60N7-70-704"    , 172m },
            { "60N7-80-804"    , 199m },

            { "60N9-60-60D"    , 177m },
            { "60N9-70-70D"    , 206m },
            { "60N9-80-80D"    , 233m },

            { "60N6-60-60D"    , 155m },
            { "60N6-70-70D"    , 185m },
            { "60N6-80-80D"    , 195m },
            { "60N6-60-60DM3"  , 218m },
            { "60N6-70-70DM3"  , 248m },

            { "60A9-40-40"     ,  78m },
            { "60A9-50-50"     ,  90m },
            { "60A9-60-60"     , 108m },
            { "60A9-70-70"     , 120m },
            { "60A9-80-80"     , 138m },

            { "60NC-45-904S"   , 240m },
            { "60N9-80-504L"   , 240m },

            { "60E5-55-754"    , 290m },

            //R9 Premium H7 Mirrors
            { "60R7-50-704"    , 185m },
            { "60R7-60-804"    , 235m },
            { "60R7-65-904"    , 275m },
            { "60R7-70-504"    , 185m },
            { "60R7-80-604"    , 235m },
            { "60R7-90-654"    , 275m },
            { "60R7-120-704L"  , 340m },
            { "60R7-140-804L"  , 428m },

            //R9 Premium N9 Mirrors
            { "60R9-60-604"    , 189m },
            { "60R9-70-704"    , 227m },
            { "60R9-80-804"    , 263m },
            { "60R9-90-904"    , 297m },

            //P8 Genesis Rectangular Framed Mirrors with Light
            { "60P8-60-804F"   , 290m },
            { "60P8-65-904F"   , 320m },
            { "60P8-75-1204F"  , 390m },
            { "60P8-80-604F"   , 290m },
            { "60P8-90-654F"   , 320m },
            { "60P8-120-754F"  , 390m },

            //P9 Isavella Circular Framed Mirrors with Light
            { "60P9-60-604F"   , 290m },
            { "60P9-70-704F"   , 330m },
            { "60P9-80-804F"   , 370m },
            { "60P9-90-904F"   , 410m },

            //ES Riviera Double Plexi Mirrors with Light
            { "60ES-50-704F"   , 400m },
            { "60ES-80-604F"   , 460m },
            { "60ES-95-704F"   , 520m },

            //EL Riviera Single Top Plexi Mirrors with Light
            { "60EL-50-704F"   , 350m },
            { "60EL-80-604F"   , 405m },
            { "60EL-95-704F"   , 455m },

            //N1 Round1000 Circle Segment with Light
            { "60N1-80-604"    , 240m },
            { "60N1-80-704"    , 250m },
            { "60N1-90-704"    , 290m },

            //N2 Round2000 Circle Segment2 with Light
            { "60N2-90-904"    , 399m },
            { "60N2-110-1104"  , 499m },

            //ND Pebble Mirror
            { "60ND-58-794S"   , 290m },

            //NS Stone Mirror
            { "60NS-85-754F"   , 348m },
            { "60NS-130-1203F" , 445m },
        };

        /// <summary>
        /// Contains the Mirror Options and Lights Dictionary - Key : Enum -- Value --Code/Price
        /// </summary>
        public static readonly Dictionary<Enum, (string, decimal)> MirrorOptionsPriceCodeDictionary = new()
        {
            { MirrorOption.TouchSwitch                      , ("0000-01-A1"     ,  35.00m) },
            { MirrorOption.DimmerSwitch                     , ("0000-03-DI"     ,  45.00m) },
            { MirrorOption.SensorSwitch                     , ("0000-02-SE"     ,  35.00m) },
            { MirrorOption.Clock                            , ("0000-21-T"      ,  49.00m) },
            { MirrorOption.Fog16W                           , ("0000-24-F"      ,  34.00m) },
            { MirrorOption.Fog24W                           , ("68BA-24"        ,  42.00m) },
            { MirrorOption.Fog55W                           , ("68BA-55"        ,  65.50m) },
            { MirrorOption.IPLid                            , ("0000-37-IP"     ,  30.00m) },
            { MirrorOption.RoundedCorners                   , ("0000-CU-RVE"    ,  15.50m) },
            { MirrorOption.Zoom                             , ("0000-22-Z3"     ,  60.00m) },
            { MirrorOption.ZoomLed                          , ("0000-23-M3"     ,  90.00m) },
            { MirrorOption.ZoomLedTouch                     , ("0000-28-MT"     , 125.00m) },
            { MirrorOption.BlueTooth                        , ("0000-26-BL"     ,  86.00m) },
            { MirrorOption.DisplayRadio                     , ("0000-11-FM-BLU" , 149.00m) },
            { MirrorOption.Display19                        , ("0000-19-00"     , 129.00m) },
            { MirrorOption.Display20                        , ("0000-20-00"     , 129.00m) },
            { MirrorOption.TouchSwitchFog                   , ("0000-01-A1"     ,  35.00m) },
            { MirrorOption.BackLightSealedChannel           , ("0000-BA-CH"     ,   0.00m) },
            { MirrorOption.FrontLightSealedChannel          , ("0000-FR-CH"     ,   0.00m) },
            { MirrorOption.SingleTopLightedPlexiglass       , ("0000-PL-SI"     ,   0.00m) },
            { MirrorOption.DoubleTopBottomLightedPlexiglass , ("0000-PL-DB"     ,   0.00m) },
            { MirrorOption.SmartAntiFog                     , ("0000-SM-F"      ,   0.00m) },
            { MirrorOption.EcoTouch                         , ("0000-06-CF"     ,  45.00m) },
            { MirrorOption.DisplayRadioBlack                , ("0000-11-FM-BLA" , 149.00m) },
            { MirrorOption.Lamp                             , ("0000-LAMP"      ,   0.00m) },
            { MirrorOption.LightAluminumChannel             , ("0000-AL-KAN"    ,  50.00m) },

            { MirrorLight.WithoutLight      , (""               ,   0.00m)  },
            { MirrorLight.Cold              , ("0000-33-6K"     ,  36.00m) },
            { MirrorLight.Daylight          , ("0000-32-4K"     ,  36.00m) },
            { MirrorLight.Warm              , ("0000-31-3K"     ,  36.00m) },
            { MirrorLight.Warm_Cold         , ("0000-34-36"     ,  44.00m) },
            { MirrorLight.Warm_Cold_Day     , ("0000-32-3436"   ,  44.00m) },
            { MirrorLight.Day_COB           , ("0000-32-4KCOB"  ,  44.00m) },
            { MirrorLight.Warm_COB          , ("0000-31-3KCOB"  ,  44.00m) },
            { MirrorLight.Cold_COB          , ("0000-33-6KCOB"  ,  44.00m) },
            { MirrorLight.Warm_Cold_Day_COB , ("0000-32-3436COB",  56.00m) },
            { MirrorLight.Day_16W           , ("0000-32-4K16W"  ,  66.00m) },
            { MirrorLight.Warm_16W          , ("0000-31-3K16W"  ,  66.00m) },
            { MirrorLight.Cold_16W          , ("0000-33-6K16W"  ,  66.00m) },
            { MirrorLight.Warm_Cold_Day_16W , ("0000-32-343616W",  66.00m) },
        };

        #endregion

        #region 2.CatalogueMirrors

        /// <summary>
        /// The Prefabricated Mirrors in the Catalogue
        /// </summary>
        /// <summary>
        /// The Prefabricated Mirrors in the Catalogue
        /// </summary>
        public static readonly List<Mirror> CatalogueMirrors =
        [
            #region M3 Catalogue Mirrors
            new Mirror()
            {
                Series = MirrorSeries.M3,
                Shape = MirrorShape.Rectangular,
                Code = "60M3-90-704L",
                Length = 90,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.M3,
                Support = new() { SupportType= MirrorSupport.Perimetrical}
            },
            new Mirror()
            {
                Series = MirrorSeries.M3,
                Shape = MirrorShape.Rectangular,
                Code = "60M3-90-704LM3",
                Length = 90,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.ZoomLed)],
                Sandblast = MirrorSandblast.M3,
                Support = new() { SupportType= MirrorSupport.Perimetrical}
            },
            new Mirror()
            {
                Series = MirrorSeries.M3,
                Shape = MirrorShape.Rectangular,
                Code = "60M3-90-653LCT",
                Length = 90,
                Height = 65,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners),new MirrorExtra(MirrorOption.Clock)],
                Sandblast = MirrorSandblast.M3,
                Support = new() { SupportType= MirrorSupport.Perimetrical}
            },
            
            #endregion
            #region 6000 Catalogue Mirrors
            new Mirror()
            {
                Series = MirrorSeries._6000,
                Shape = MirrorShape.Rectangular,
                Code = "6000-60-804",
                Length = 60,
                Height = 80,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast._6000,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries._6000,
                Shape = MirrorShape.Rectangular,
                Code = "6000-75-553",
                Length = 75,
                Height = 55,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast._6000,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries._6000,
                Shape = MirrorShape.Rectangular,
                Code = "6000-75-553LT",
                Length = 75,
                Height = 55,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.Clock)],
                Sandblast = MirrorSandblast._6000,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries._6000,
                Shape = MirrorShape.Rectangular,
                Code = "6000-90-653LT",
                Length = 90,
                Height = 65,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.Clock)],
                Sandblast = MirrorSandblast._6000,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries._6000,
                Shape = MirrorShape.Rectangular,
                Code = "6000-75-55DLT",
                Length = 75,
                Height = 55,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch),new MirrorExtra(MirrorOption.Clock)],
                Sandblast = MirrorSandblast._6000,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries._6000,
                Shape = MirrorShape.Rectangular,
                Code = "6000-90-65DLT",
                Length = 90,
                Height = 65,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch),new MirrorExtra(MirrorOption.Clock)],
                Sandblast = MirrorSandblast._6000,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries._6000,
                Shape = MirrorShape.Rectangular,
                Code = "6000-90-70",
                Length = 90,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast._6000,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            
            #endregion
            #region X4 Catalogue Mirrors
            new Mirror()
            {
                Series = MirrorSeries.X4,
                Shape = MirrorShape.Rectangular,
                Code = "60X4-55-754",
                Length = 55,
                Height = 75,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.X4,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X4,
                Shape = MirrorShape.Rectangular,
                Code = "60X4-65-904",
                Length = 65,
                Height = 90,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.X4,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X4,
                Shape = MirrorShape.Rectangular,
                Code = "60X4-70-1204L",
                Length = 70,
                Height = 120,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.X4,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X4,
                Shape = MirrorShape.Rectangular,
                Code = "60X4-65-904LF",
                Length = 65,
                Height = 90,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.Fog16W),new MirrorExtra(MirrorOption.TouchSwitchFog)],
                Sandblast = MirrorSandblast.X4,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X4,
                Shape = MirrorShape.Rectangular,
                Code = "60X4-75-554",
                Length = 75,
                Height = 55,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.X4,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X4,
                Shape = MirrorShape.Rectangular,
                Code = "60X4-90-704",
                Length = 90,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.X4,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X4,
                Shape = MirrorShape.Rectangular,
                Code = "60X4-120-80DL",
                Length = 120,
                Height = 80,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch)],
                Sandblast = MirrorSandblast.X4,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X4,
                Shape = MirrorShape.Rectangular,
                Code = "60X4-75-553ST",
                Length = 75,
                Height = 55,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.Clock)],
                Sandblast = MirrorSandblast.X4,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X4,
                Shape = MirrorShape.Rectangular,
                Code = "60X4-75-55DST",
                Length = 75,
                Height = 55,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch),new MirrorExtra(MirrorOption.Clock)],
                Sandblast = MirrorSandblast.X4,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X4,
                Shape = MirrorShape.Rectangular,
                Code = "60X4-90-704M3",
                Length = 90,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.ZoomLed)],
                Sandblast = MirrorSandblast.X4,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            
            #endregion
            #region X6 Catalogue Mirrors
            new Mirror()
            {
                Series = MirrorSeries.X6,
                Shape = MirrorShape.Rectangular,
                Code = "60X6-55-754",
                Length = 55,
                Height = 75,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.X6,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X6,
                Shape = MirrorShape.Rectangular,
                Code = "60X6-70-904",
                Length = 70,
                Height = 90,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.X6,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X6,
                Shape = MirrorShape.Rectangular,
                Code = "60X6-80-120DL",
                Length = 80,
                Height = 120,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch)],
                Sandblast = MirrorSandblast.X6,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X6,
                Shape = MirrorShape.Rectangular,
                Code = "60X6-70-904M3",
                Length = 70,
                Height = 90,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch),new MirrorExtra(MirrorOption.ZoomLed)],
                Sandblast = MirrorSandblast.X6,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X6,
                Shape = MirrorShape.Rectangular,
                Code = "60X6-75-554",
                Length = 75,
                Height = 55,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.X6,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X6,
                Shape = MirrorShape.Rectangular,
                Code = "60X6-90-654",
                Length = 90,
                Height = 65,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.X6,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X6,
                Shape = MirrorShape.Rectangular,
                Code = "60X6-120-704L",
                Length = 120,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.X6,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X6,
                Shape = MirrorShape.Rectangular,
                Code = "60X6-75-553LT",
                Length = 75,
                Height = 55,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.Clock)],
                Sandblast = MirrorSandblast.X6,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X6,
                Shape = MirrorShape.Rectangular,
                Code = "60X6-75-55DLT",
                Length = 75,
                Height = 55,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch),new MirrorExtra(MirrorOption.Clock)],
                Sandblast = MirrorSandblast.X6,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X6,
                Shape = MirrorShape.Rectangular,
                Code = "60X6-90-65DLT",
                Length = 90,
                Height = 65,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch),new MirrorExtra(MirrorOption.Clock)],
                Sandblast = MirrorSandblast.X6,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.X6,
                Shape = MirrorShape.Rectangular,
                Code = "60X6-90-654LF",
                Length = 90,
                Height = 65,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.Fog16W),new MirrorExtra(MirrorOption.TouchSwitchFog)],
                Sandblast = MirrorSandblast.X6,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            #endregion
            #region H8 Catalogue Mirrors
            new Mirror()
            {
                Series = MirrorSeries.H8,
                Shape = MirrorShape.Rectangular,
                Code = "60H8-55-754",
                Length = 55,
                Height = 75,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.H8,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H8,
                Shape = MirrorShape.Rectangular,
                Code = "60H8-65-904",
                Length = 65,
                Height = 90,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.H8,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H8,
                Shape = MirrorShape.Rectangular,
                Code = "60H8-70-1204",
                Length = 70,
                Height = 120,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.H8,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H8,
                Shape = MirrorShape.Rectangular,
                Code = "60H8-70-120DLM3",
                Length = 70,
                Height = 120,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch),new MirrorExtra(MirrorOption.ZoomLed)],
                Sandblast = MirrorSandblast.H8,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H8,
                Shape = MirrorShape.Rectangular,
                Code = "60H8-75-554",
                Length = 75,
                Height = 55,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.H8,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H8,
                Shape = MirrorShape.Rectangular,
                Code = "60H8-90-654",
                Length = 90,
                Height = 65,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.H8,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H8,
                Shape = MirrorShape.Rectangular,
                Code = "60H8-120-704",
                Length = 120,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.H8,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H8,
                Shape = MirrorShape.Rectangular,
                Code = "60H8-120-70DLM3",
                Length = 120,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch),new MirrorExtra(MirrorOption.ZoomLed)],
                Sandblast = MirrorSandblast.H8,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            #endregion
            #region H7 Catalogue Mirrors
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-50-704",
                Length = 50,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-55-754",
                Length = 55,
                Height = 75,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-70-704",
                Length = 70,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-80-804",
                Length = 80,
                Height = 80,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-55-854S",
                Length = 55,
                Height = 85,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-65-904",
                Length = 65,
                Height = 90,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-70-1004",
                Length = 70,
                Height = 100,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-80-1104L",
                Length = 80,
                Height = 110,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-70-1204",
                Length = 70,
                Height = 120,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-70-1204S",
                Length = 70,
                Height = 120,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-80-1204L",
                Length = 80,
                Height = 120,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-80-120DL",
                Length = 80,
                Height = 120,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-80-1404L",
                Length = 80,
                Height = 140,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-70-504",
                Length = 70,
                Height = 50,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-75-554",
                Length = 75,
                Height = 55,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-90-654",
                Length = 90,
                Height = 65,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-95-354",
                Length = 95,
                Height = 35,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-100-704",
                Length = 100,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-110-804L",
                Length = 110,
                Height = 80,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-120-704L",
                Length = 120,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-120-704S",
                Length = 120,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-120-704",
                Length = 120,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-120-704LM3",
                Length = 120,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners),new MirrorExtra(MirrorOption.ZoomLed)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-120-804L",
                Length = 120,
                Height = 80,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-120-80DL",
                Length = 120,
                Height = 80,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.H7,
                Shape = MirrorShape.Rectangular,
                Code = "60H7-140-804L",
                Length = 140,
                Height = 80,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.RoundedCorners)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            #endregion
            #region N9 Catalogue Mirrors
            new Mirror()
            {
                Series = MirrorSeries.N9,
                Shape = MirrorShape.Circular,
                Code = "60N9-50-504",
                Length = null,
                Height = null,
                Diameter = 50,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N9,
                Shape = MirrorShape.Circular,
                Code = "60N9-60-604",
                Length = null,
                Height = null,
                Diameter = 60,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N9,
                Shape = MirrorShape.Circular,
                Code = "60N9-70-704",
                Length = null,
                Height = null,
                Diameter = 70,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N9,
                Shape = MirrorShape.Circular,
                Code = "60N9-80-804",
                Length = null,
                Height = null,
                Diameter = 80,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N9,
                Shape = MirrorShape.Circular,
                Code = "60N9-90-904",
                Length = null,
                Height = null,
                Diameter = 90,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N9,
                Shape = MirrorShape.Circular,
                Code = "60N9-100-1004",
                Length = null,
                Height = null,
                Diameter = 100,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N9,
                Shape = MirrorShape.Circular,
                Code = "60N9-110-1104",
                Length = null,
                Height = null,
                Diameter = 110,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N9,
                Shape = MirrorShape.Circular,
                Code = "60N9-120-1204",
                Length = null,
                Height = null,
                Diameter = 120,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N9,
                Shape = MirrorShape.Circular,
                Code = "60N9-130-1304",
                Length = null,
                Height = null,
                Diameter = 130,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N9,
                Shape = MirrorShape.Circular,
                Code = "60N9-60-60DM3",
                Length = null,
                Height = null,
                Diameter = 60,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch),new MirrorExtra(MirrorOption.ZoomLed)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N9,
                Shape = MirrorShape.Circular,
                Code = "60N9-70-70DM3",
                Length = null,
                Height = null,
                Diameter = 70,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch),new MirrorExtra(MirrorOption.ZoomLed)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N9,
                Shape = MirrorShape.Circular,
                Code = "60N9-80-80DM3",
                Length = null,
                Height = null,
                Diameter = 80,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch),new MirrorExtra(MirrorOption.ZoomLed)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            #endregion
            #region N7 Catalogue Mirrors
            new Mirror()
            {
                Series = MirrorSeries.N7,
                Shape = MirrorShape.Circular,
                Code = "60N7-60-604",
                Length = null,
                Height = null,
                Diameter = 60,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N6,
                Support = new() { SupportType = MirrorSupport.Frame , FinishType = SupportFinishType.Painted , PaintFinish = SupportPaintFinish.Black }
            },
            new Mirror()
            {
                Series = MirrorSeries.N7,
                Shape = MirrorShape.Circular,
                Code = "60N7-70-704",
                Length = null,
                Height = null,
                Diameter = 70,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N6,
                Support = new() { SupportType = MirrorSupport.Frame, FinishType = SupportFinishType.Painted, PaintFinish = SupportPaintFinish.Black }
            },
            new Mirror()
            {
                Series = MirrorSeries.N7,
                Shape = MirrorShape.Circular,
                Code = "60N7-80-804",
                Length = null,
                Height = null,
                Diameter = 80,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N6,
                Support = new() { SupportType = MirrorSupport.Frame, FinishType = SupportFinishType.Painted, PaintFinish = SupportPaintFinish.Black }
            },
            #endregion
            #region N6 Catalogue Mirrors
            new Mirror()
            {
                Series = MirrorSeries.N6,
                Shape = MirrorShape.Circular,
                Code = "60N6-60-60D",
                Length = null,
                Height = null,
                Diameter = 60,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch)],
                Sandblast = MirrorSandblast.N6,
                Support = new() { SupportType = MirrorSupport.Perimetrical}
            },
            new Mirror()
            {
                Series = MirrorSeries.N6,
                Shape = MirrorShape.Circular,
                Code = "60N6-70-70D",
                Length = null,
                Height = null,
                Diameter = 70,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch)],
                Sandblast = MirrorSandblast.N6,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N6,
                Shape = MirrorShape.Circular,
                Code = "60N6-80-80D",
                Length = null,
                Height = null,
                Diameter = 80,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch)],
                Sandblast = MirrorSandblast.N6,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N6,
                Shape = MirrorShape.Circular,
                Code = "60N6-60-60DM3",
                Length = null,
                Height = null,
                Diameter = 60,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch),new MirrorExtra(MirrorOption.ZoomLed)],
                Sandblast = MirrorSandblast.N6,
                Support = new() { SupportType = MirrorSupport.Perimetrical}
            },
            new Mirror()
            {
                Series = MirrorSeries.N6,
                Shape = MirrorShape.Circular,
                Code = "60N6-70-70DM3",
                Length = null,
                Height = null,
                Diameter = 70,
                Lighting = new() { Light = MirrorLight.Warm_Cold_Day },
                Extras = [new MirrorExtra(MirrorOption.DimmerSwitch),new MirrorExtra(MirrorOption.ZoomLed)],
                Sandblast = MirrorSandblast.N6,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            #endregion
            #region A9 Catalogue Mirrors
            new Mirror()
            {
                Series = MirrorSeries.A9,
                Shape = MirrorShape.Circular,
                Code = "60A9-40-40",
                Length = null,
                Height = null,
                Diameter = 40,
                Lighting = new() { Light = MirrorLight.WithoutLight },
                Extras = [],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Frame , FinishType = SupportFinishType.Painted , PaintFinish = SupportPaintFinish.Black }
            },
            new Mirror()
            {
                Series = MirrorSeries.A9,
                Shape = MirrorShape.Circular,
                Code = "60A9-50-50",
                Length = null,
                Height = null,
                Diameter = 50,
                Lighting = new() { Light = MirrorLight.WithoutLight },
                Extras = [],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Frame, FinishType = SupportFinishType.Painted, PaintFinish = SupportPaintFinish.Black }
            },
            new Mirror()
            {
                Series = MirrorSeries.A9,
                Shape = MirrorShape.Circular,
                Code = "60A9-60-60",
                Length = null,
                Height = null,
                Diameter = 60,
                Lighting = new() { Light = MirrorLight.WithoutLight },
                Extras = [],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Frame, FinishType = SupportFinishType.Painted, PaintFinish = SupportPaintFinish.Black }
            },
            new Mirror()
            {
                Series = MirrorSeries.A9,
                Shape = MirrorShape.Circular,
                Code = "60A9-70-70",
                Length = null,
                Height = null,
                Diameter = 70,
                Lighting = new() { Light = MirrorLight.WithoutLight },
                Extras = [],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Frame, FinishType = SupportFinishType.Painted, PaintFinish = SupportPaintFinish.Black }
            },
            new Mirror()
            {
                Series = MirrorSeries.A9,
                Shape = MirrorShape.Circular,
                Code = "60A9-80-80",
                Length = null,
                Height = null,
                Diameter = 80,
                Lighting = new() { Light = MirrorLight.WithoutLight },
                Extras = [],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Frame, FinishType = SupportFinishType.Painted, PaintFinish = SupportPaintFinish.Black }
            },
            #endregion
            #region NC Catalogue Mirrors
            new Mirror()
            {
                Series = MirrorSeries.NC,
                Shape = MirrorShape.Capsule,
                Code = "60NC-45-904S",
                Length = 45,
                Height = 90,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.NC,
                Shape = MirrorShape.Capsule,
                Code = "60N9-80-504L",
                Length = 80,
                Height = 50,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
	        #endregion
            #region NE Catalogue Mirrors
            new Mirror()
            {
                Series = MirrorSeries.NL,
                Shape = MirrorShape.Ellipse,
                Code = "60E5-55-754",
                Length = 55,
                Height = 75,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
	        #endregion
            #region R7 Premium H7 Mirrors
            new Mirror()
            {
                Series = MirrorSeries.R7,
                Shape = MirrorShape.Rectangular,
                Code = "60R7-50-704",
                Length = 50,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Day_16W },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.BackLightSealedChannel),
                    new MirrorExtra(MirrorOption.RoundedCorners)
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.R7,
                Shape = MirrorShape.Rectangular,
                Code = "60R7-60-804",
                Length = 60,
                Height = 80,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Day_16W },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.BackLightSealedChannel),
                    new MirrorExtra(MirrorOption.RoundedCorners)
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.R7,
                Shape = MirrorShape.Rectangular,
                Code = "60R7-65-904",
                Length = 65,
                Height = 90,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Day_16W },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.BackLightSealedChannel),
                    new MirrorExtra(MirrorOption.RoundedCorners)
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            //Skip 60R7-70-1204L - App does not know about the button placement
            //Skip 60R7-80-1404L - App does not know about the button placement
            new Mirror()
            {
                Series = MirrorSeries.R7,
                Shape = MirrorShape.Rectangular,
                Code = "60R7-70-504",
                Length = 70,
                Height = 50,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Day_16W },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.BackLightSealedChannel),
                    new MirrorExtra(MirrorOption.RoundedCorners)
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.R7,
                Shape = MirrorShape.Rectangular,
                Code = "60R7-80-604",
                Length = 80,
                Height = 60,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Day_16W },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.BackLightSealedChannel),
                    new MirrorExtra(MirrorOption.RoundedCorners)
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.R7,
                Shape = MirrorShape.Rectangular,
                Code = "60R7-90-654",
                Length = 90,
                Height = 65,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Day_16W },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.BackLightSealedChannel),
                    new MirrorExtra(MirrorOption.RoundedCorners)
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.R7,
                Shape = MirrorShape.Rectangular,
                Code = "60R7-120-704L",
                Length = 120,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Day_16W },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.BackLightSealedChannel),
                    new MirrorExtra(MirrorOption.RoundedCorners)
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.R7,
                Shape = MirrorShape.Rectangular,
                Code = "60R7-140-804L",
                Length = 140,
                Height = 80,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Day_16W },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.BackLightSealedChannel),
                    new MirrorExtra(MirrorOption.RoundedCorners)
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
	        #endregion
            #region R9 Premium N9 Mirrors
            new Mirror()
            {
                Series = MirrorSeries.R9,
                Shape = MirrorShape.Circular,
                Code = "60R9-60-604",
                Length = null,
                Height = null,
                Diameter = 60,
                Lighting = new() { Light = MirrorLight.Day_16W },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.BackLightSealedChannel)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.R9,
                Shape = MirrorShape.Circular,
                Code = "60R9-70-704",
                Length = null,
                Height = null,
                Diameter = 70,
                Lighting = new() { Light = MirrorLight.Day_16W },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.BackLightSealedChannel)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.R9,
                Shape = MirrorShape.Circular,
                Code = "60R9-80-804",
                Length = null,
                Height = null,
                Diameter = 80,
                Lighting = new() { Light = MirrorLight.Day_16W },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.BackLightSealedChannel)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.R9,
                Shape = MirrorShape.Circular,
                Code = "60R9-90-904",
                Length = null,
                Height = null,
                Diameter = 90,
                Lighting = new() { Light = MirrorLight.Day_16W },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.BackLightSealedChannel)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
	        #endregion
            #region P8 Genesis Rectangular Mirrors
            new Mirror()
            {
                Series = MirrorSeries.P8,
                Shape = MirrorShape.Rectangular,
                Code = "60P8-60-804F",
                Length = 60,
                Height = 80,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.FrontLightSealedChannel),
                    new MirrorExtra(MirrorOption.RoundedCorners),
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Frame,FinishType = SupportFinishType.Painted , PaintFinish = SupportPaintFinish.Black }
            },
            new Mirror()
            {
                Series = MirrorSeries.P8,
                Shape = MirrorShape.Rectangular,
                Code = "60P8-65-904F",
                Length = 65,
                Height = 90,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.FrontLightSealedChannel),
                    new MirrorExtra(MirrorOption.RoundedCorners),
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Frame,FinishType = SupportFinishType.Painted , PaintFinish = SupportPaintFinish.Black }
            },
            new Mirror()
            {
                Series = MirrorSeries.P8,
                Shape = MirrorShape.Rectangular,
                Code = "60P8-75-1204F",
                Length = 75,
                Height = 120,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.FrontLightSealedChannel),
                    new MirrorExtra(MirrorOption.RoundedCorners),
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Frame,FinishType = SupportFinishType.Painted , PaintFinish = SupportPaintFinish.Black }
            },
            new Mirror()
            {
                Series = MirrorSeries.P8,
                Shape = MirrorShape.Rectangular,
                Code = "60P8-80-604F",
                Length = 80,
                Height = 60,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.FrontLightSealedChannel),
                    new MirrorExtra(MirrorOption.RoundedCorners),
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Frame,FinishType = SupportFinishType.Painted , PaintFinish = SupportPaintFinish.Black }
            },
            new Mirror()
            {
                Series = MirrorSeries.P8,
                Shape = MirrorShape.Rectangular,
                Code = "60P8-90-654F",
                Length = 90,
                Height = 65,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.FrontLightSealedChannel),
                    new MirrorExtra(MirrorOption.RoundedCorners),
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Frame,FinishType = SupportFinishType.Painted , PaintFinish = SupportPaintFinish.Black }
            },
            new Mirror()
            {
                Series = MirrorSeries.P8,
                Shape = MirrorShape.Rectangular,
                Code = "60P8-120-754F",
                Length = 120,
                Height = 75,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.FrontLightSealedChannel),
                    new MirrorExtra(MirrorOption.RoundedCorners),
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Frame,FinishType = SupportFinishType.Painted , PaintFinish = SupportPaintFinish.Black }
            },
	        #endregion
            #region P9 Isavella Circular Mirrors
            new Mirror()
            {
                Series = MirrorSeries.P9,
                Shape = MirrorShape.Circular,
                Code = "60P9-60-604F",
                Length = null,
                Height = null,
                Diameter = 60,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.FrontLightSealedChannel)
                ],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Frame,FinishType = SupportFinishType.Painted , PaintFinish = SupportPaintFinish.Black }
            },
            new Mirror()
            {
                Series = MirrorSeries.P9,
                Shape = MirrorShape.Circular,
                Code = "60P9-70-704F",
                Length = null,
                Height = null,
                Diameter = 70,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.FrontLightSealedChannel)
                ],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Frame,FinishType = SupportFinishType.Painted , PaintFinish = SupportPaintFinish.Black }
            },
            new Mirror()
            {
                Series = MirrorSeries.P9,
                Shape = MirrorShape.Circular,
                Code = "60P9-80-804F",
                Length = null,
                Height = null,
                Diameter = 80,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.FrontLightSealedChannel)
                ],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Frame,FinishType = SupportFinishType.Painted , PaintFinish = SupportPaintFinish.Black }
            },
            new Mirror()
            {
                Series = MirrorSeries.P9,
                Shape = MirrorShape.Circular,
                Code = "60P9-90-904F",
                Length = null,
                Height = null,
                Diameter = 90,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.FrontLightSealedChannel)
                ],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Frame,FinishType = SupportFinishType.Painted , PaintFinish = SupportPaintFinish.Black }
            },
	        #endregion
            #region ES Riviera Double Plexi Mirrors
            new Mirror()
            {
                Series = MirrorSeries.ES,
                Shape = MirrorShape.Rectangular,
                Code = "60ES-50-704F",
                Length = 50,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.DoubleTopBottomLightedPlexiglass)
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.ES,
                Shape = MirrorShape.Rectangular,
                Code = "60ES-80-604F",
                Length = 80,
                Height = 60,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.DoubleTopBottomLightedPlexiglass)
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.ES,
                Shape = MirrorShape.Rectangular,
                Code = "60ES-95-704F",
                Length = 95,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.DoubleTopBottomLightedPlexiglass)
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
	        #endregion
            #region EL Riviera Single Top Plexi Mirrors
            new Mirror()
            {
                Series = MirrorSeries.EL,
                Shape = MirrorShape.Rectangular,
                Code = "60EL-50-704F",
                Length = 50,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.DoubleTopBottomLightedPlexiglass)
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.EL,
                Shape = MirrorShape.Rectangular,
                Code = "60EL-80-604F",
                Length = 80,
                Height = 60,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.DoubleTopBottomLightedPlexiglass)
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.EL,
                Shape = MirrorShape.Rectangular,
                Code = "60EL-95-704F",
                Length = 95,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras =
                [
                    new MirrorExtra(MirrorOption.TouchSwitch),
                    new MirrorExtra(MirrorOption.Fog16W),
                    new MirrorExtra(MirrorOption.EcoTouch),
                    new MirrorExtra(MirrorOption.DoubleTopBottomLightedPlexiglass)
                ],
                Sandblast = MirrorSandblast.H7,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
	        #endregion
            #region N1 Round 1000 Circle Segment Mirrors
            new Mirror()
            {
                Series = MirrorSeries.N1,
                Shape = MirrorShape.CircleSegment,
                Code = "60N1-80-604",
                Length = 80,
                Height = 60,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N1,
                Shape = MirrorShape.CircleSegment,
                Code = "60N1-80-704",
                Length = 80,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N1,
                Shape = MirrorShape.CircleSegment,
                Code = "60N1-90-704",
                Length = 90,
                Height = 70,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
	        #endregion
            #region N2 Round 2000 Circle Segment2 Mirrors
            new Mirror()
            {
                Series = MirrorSeries.N2,
                Shape = MirrorShape.CircleSegment2,
                Code = "60N2-90-904",
                Length = 90,
                Height = 90,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.N2,
                Shape = MirrorShape.CircleSegment2,
                Code = "60N2-110-1104",
                Length = 110,
                Height = 110,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
	        #endregion
            #region ND Pebble Mirrors
            new Mirror()
            {
                Series = MirrorSeries.ND,
                Shape = MirrorShape.PebbleND,
                Code = "60ND-58-794S",
                Length = 58,
                Height = 79,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
	        #endregion
            #region NS Stone Mirrors
            new Mirror()
            {
                Series = MirrorSeries.NS,
                Shape = MirrorShape.StoneNS,
                Code = "60NS-85-754F",
                Length = 85,
                Height = 75,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Daylight },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.Fog16W),new MirrorExtra(MirrorOption.EcoTouch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
            new Mirror()
            {
                Series = MirrorSeries.NS,
                Shape = MirrorShape.StoneNS,
                Code = "60NS-130-1203F",
                Length = 130,
                Height = 120,
                Diameter = null,
                Lighting = new() { Light = MirrorLight.Warm },
                Extras = [new MirrorExtra(MirrorOption.TouchSwitch),new MirrorExtra(MirrorOption.Fog16W),new MirrorExtra(MirrorOption.EcoTouch)],
                Sandblast = MirrorSandblast.N9,
                Support = new() { SupportType = MirrorSupport.Perimetrical }
            },
	        #endregion
        ];

        #endregion

        #region 3.Pricing Methods

        /// <summary>
        /// Returns the Codes Price of the Catalogue .If the Code does not Exist throws an Exception
        /// </summary>
        /// <param name="mirrorCode">The Code of the Mirror</param>
        /// <returns></returns>
        public static decimal GetMirrorPriceFromCatalogue(string mirrorCode)
        {
            if (string.IsNullOrWhiteSpace(mirrorCode)) return 9999m;
            if (CatalogueMirrorsPricing.TryGetValue(mirrorCode, out decimal value))
            {
                return value;
            }
            else
            {
                throw new NotSupportedException("Given Code not Present in Catalogue");
            }
        }

        /// <summary>
        /// Returns the Price of the Mirror Glass taken from the Respective Table (Used for Customized Dimensions Only , Without Any Extras)
        /// </summary>
        /// <param name="mirror">The Mirror</param>
        /// <returns></returns>
        public static decimal GetMirrorPriceWithoutExtras(Mirror mirror)
        {
            //Validate mirror is not Null
            if (mirror == null ||
                mirror.Lighting == null ||
                mirror.Lighting.Light == null ||
                (mirror.Shape is not MirrorShape.Circular && (mirror.Height == null || mirror.Length == null)) || //When rectangular Height/Length not Null
                (mirror.Shape == MirrorShape.Circular && mirror.Diameter == null))  //When Circular Diameter not Null
            {
                return 0m;
            }

            decimal price;

            if (mirror.Shape is not MirrorShape.Circular and not MirrorShape.Special)
            {
                //Bring Height and Length to the Next 5cm Step
                int pricingLength = (int)(Math.Round((mirror.Length ?? 0) / 5m, MidpointRounding.ToPositiveInfinity) * 5);
                int pricingHeight = (int)(Math.Round((mirror.Height ?? 0) / 5m, MidpointRounding.ToPositiveInfinity) * 5);

                if (mirror.Lighting.Light != MirrorLight.WithoutLight)
                {
                    // Find price of Lighted Mirror
                    price = CustomLightMirrorsPriceTable[(pricingLength, pricingHeight)];
                }
                else if (mirror.Lighting.Light == MirrorLight.WithoutLight)
                {
                    //When the rounding gives values 121-160 and 161-185
                    if (pricingLength > 120 && pricingLength <= 160) { pricingLength = 160; }
                    else if (pricingLength > 160 && pricingLength <= 185) { pricingLength = 185; }
                    else if (pricingLength > 185 && pricingLength <= 230) { pricingLength = 230; }
                    if (pricingHeight > 120 && pricingHeight <= 160) { pricingHeight = 160; }
                    else if (pricingHeight > 160 && pricingHeight <= 185) { pricingHeight = 185; }
                    else if (pricingHeight > 185 && pricingHeight <= 230) { pricingHeight = 230; }

                    price = CustomSimpleMirrorsPriceTable[(pricingLength, pricingHeight)];
                }
                else
                {
                    price = 0m;
                }
            }
            else if (mirror.Shape == MirrorShape.Circular)
            {
                int pricingDiameter = (int)(Math.Round((mirror.Diameter ?? 0) / 5m, MidpointRounding.ToPositiveInfinity) * 5);
                if (mirror.Lighting.Light != MirrorLight.WithoutLight)
                {
                    // Find price of Lighted Mirror (Get the equivalent price of a rectangular mirror with Height=Length=Diameter & add SQM*Additional Price
                    price = CustomLightMirrorsPriceTable[(pricingDiameter, pricingDiameter)];
                }
                else if (mirror.Lighting.Light == MirrorLight.WithoutLight)
                {
                    //When the rounding gives values 121-160 and 161-185
                    if (pricingDiameter > 120 && pricingDiameter <= 160) { pricingDiameter = 160; }
                    else if (pricingDiameter > 160 && pricingDiameter <= 185) { pricingDiameter = 185; }
                    else if (pricingDiameter > 185 && pricingDiameter <= 230) { pricingDiameter = 230; }
                    price = CustomSimpleMirrorsPriceTable[(pricingDiameter, pricingDiameter)];
                }
                else
                {
                    price = 0m;
                }
            }
            else
            {
                price = 0m;
            }

            return price;
        }

        /// <summary>
        /// Returns the Starting Price for a Light
        /// </summary>
        /// <param name="light">The Light Option</param>
        /// <param name="isSpecialDimensionMirror">If the Mirror for this Light is of Special Dimensions</param>
        /// <param name="isCatalogueMirrorDefaultLight">If the Mirror is From Catalogue with its Default Light</param>
        /// <returns>Starting Price of the Light</returns>
        public static decimal GetLightPrice(MirrorLight light, bool isSpecialDimensionMirror, bool isCatalogueMirrorDefaultLight)
        {
            decimal price;
            switch (light)
            {
                //For Unusual Light always set a Price except if its default light
                case MirrorLight.Warm_Cold:
                case MirrorLight.Warm_Cold_Day:
                case MirrorLight.Day_COB:
                case MirrorLight.Warm_COB:
                case MirrorLight.Cold_COB:
                case MirrorLight.Warm_Cold_Day_COB:
                case MirrorLight.Day_16W:
                case MirrorLight.Warm_16W:
                case MirrorLight.Cold_16W:
                case MirrorLight.Warm_Cold_Day_16W:
                    price = isCatalogueMirrorDefaultLight ? 0m : MirrorOptionsPriceCodeDictionary[light].Item2;
                    break;
                //For Defaut Lights only Set Price for Catalogue Mirrors Where the light is not Default
                //Special Dimension Mirrors do not get their Lights Charged for Cold - Warm - Day
                case MirrorLight.Warm:
                case MirrorLight.Cold:
                case MirrorLight.Daylight:
                    price = (isSpecialDimensionMirror || isCatalogueMirrorDefaultLight) ? 0m : MirrorOptionsPriceCodeDictionary[light].Item2;
                    break;
                case MirrorLight.WithoutLight:
                default:
                    price = 0m;
                    break;
            }
            return price;
        }

        /// <summary>
        /// Gets the Mirrors Frame Price
        /// </summary>
        /// <param name="mirror"></param>
        /// <returns></returns>
        public static decimal GetMirrorSupportPrice(Mirror mirror)
        {
            //Validate mirror is not Null
            if (mirror == null 
                || mirror.Lighting == null 
                || mirror.Lighting.Light == null 
                || (mirror.Shape is not MirrorShape.Circular && (mirror.Height == null || mirror.Length == null)) //When rectangular Height/Length not Null
                || (mirror.Shape == MirrorShape.Circular && mirror.Diameter == null)  //When Circular Diameter not Null
                || mirror.Support == null || mirror.Support.SupportType == null) 
                return 0m;

            //When mirror has Light and Perimetrical Back Frame the Returned Price is Always zero (Included)
            if (mirror.HasLight() && mirror.Support.SupportType is MirrorSupport.Perimetrical) return 0m;
            
            decimal price;
            if (mirror.Shape is not MirrorShape.Circular)
            {
                switch (mirror.Support.SupportType)
                {
                    case MirrorSupport.Double:
                        price = SupportModel.DoubleSupportPrice;
                        break;

                    case MirrorSupport.Perimetrical:
                        price = GetPerimetricalSupportPrice(mirror.Length ?? 0, mirror.Height ?? 0);
                        break;

                    case MirrorSupport.Frame:
                        //Find Price of Frame Painted or Electroplated
                        if (mirror.Series == MirrorSeries.P8)
                        {
                            return mirror.Support?.PaintFinish == SupportPaintFinish.Black ? 0m : 9999m; //cannot have other finish than black
                        }
                        else if (mirror.Support.FinishType == SupportFinishType.Painted && mirror.Support.PaintFinish is SupportPaintFinish.Black or SupportPaintFinish.RalColor)
                        {
                            price = GetPaintedBlackRalFramePrice(mirror.Length ?? 0, mirror.Height ?? 0, mirror.Support.PaintFinish);
                            var ralColorAddition = mirror.Support.PaintFinish is SupportPaintFinish.RalColor ? SupportModel.RalColorAdditionalPrice : 0m;
                            price += ralColorAddition;
                        }
                        else if (mirror.Support.FinishType == SupportFinishType.Painted)
                        {
                            price = GetSimilarElectroplatedFramePrice(mirror.Length ?? 0, mirror.Height ?? 0, mirror.Support.PaintFinish);
                        }
                        else
                        {
                            price = 9999m;
                        }
                        break;
                    case MirrorSupport.FrontSupports:
                        price = SupportModel.FrontSupportsSetPrice;
                        break;
                    case MirrorSupport.Without:
                    default:
                        price = 0m;
                        break;
                }
            }
            else if (mirror.Shape == MirrorShape.Circular)
            {
                switch (mirror.Support.SupportType)
                {
                    case MirrorSupport.Double:
                        price = SupportModel.DoubleSupportPrice;
                        break;
                    case MirrorSupport.Perimetrical:
                        price = GetPerimetricalSupportPrice(mirror.Diameter ?? 0, mirror.Diameter ?? 0);
                        break;
                    case MirrorSupport.Frame:
                        if (mirror.Series == MirrorSeries.P9)
                        {
                            return mirror.Support?.PaintFinish == SupportPaintFinish.Black ? 0m : 9999m; //cannot have other finish than black
                        }
                        else if (mirror.Series is MirrorSeries.A9 or MirrorSeries.N7
                                 && mirror.Support.FinishType is SupportFinishType.Painted
                                 && mirror.Support.PaintFinish is SupportPaintFinish.Black)
                        {
                            price = 0m;
                        }
                        else if (mirror.Series is MirrorSeries.N9Custom or MirrorSeries.NA && mirror.Support.FinishType is SupportFinishType.Painted)
                        {
                            if (mirror.Support.PaintFinish is SupportPaintFinish.Black or SupportPaintFinish.RalColor)
                            {
                                price = GetPaintedBlackRalFramePrice(mirror.Diameter ?? 0, mirror.Diameter ?? 0, mirror.Support.PaintFinish);
                                var ralColorAddition = mirror.Support.PaintFinish is SupportPaintFinish.RalColor ? SupportModel.RalColorAdditionalPrice : 0m;
                                price += ralColorAddition;

                            }
                            else price = GetSimilarElectroplatedFramePrice(mirror.Diameter ?? 0, mirror.Diameter ?? 0, mirror.Support.PaintFinish);
                        }
                        else
                        {
                            price = 9999m;
                        }
                        break;
                    case MirrorSupport.FrontSupports:
                        price = SupportModel.FrontSupportsSetPrice;
                        break;
                    case MirrorSupport.Without:
                    default:
                        price = 0m;
                        break;
                }
            }
            else
            {
                price = 0m;
            }
            return price;
        }

        /// <summary>
        /// Returns the Starting price of an Extra
        /// </summary>
        /// <param name="extra">The Extra for which we need the price</param>
        /// <param name="isSpecialDimensionMirror">If the mirror is Special Dimension</param>
        /// <param name="isCatalogueMirrorDefaultExtra">If the mirror is from Catalogue and has this extra as Default</param>
        /// <returns></returns>
        public static decimal GetMirrorExtraPrice(MirrorOption extra, bool isSpecialDimensionMirror, bool isCatalogueMirrorDefaultExtra)
        {
            decimal price;
            if (isSpecialDimensionMirror)
            {
                price = extra != MirrorOption.TouchSwitch ? MirrorOptionsPriceCodeDictionary[extra].Item2 : 0m;
            }
            else
            {
                price = isCatalogueMirrorDefaultExtra ? 0m : MirrorOptionsPriceCodeDictionary[extra].Item2;
            }
            return price;
        }

        /// <summary>
        /// Gets the Price of a mirrors Perimetrical Back Support
        /// </summary>
        /// <param name="mirrorLength">Mirrors Length</param>
        /// <param name="mirrorHeight">Mirrors Height</param>
        /// <returns>The Price of the Perimetrical Back Support</returns>
        private static decimal GetPerimetricalSupportPrice(int mirrorLength, int mirrorHeight)
        {
            decimal price;

            // Find the Meters of the Perimetrical Aluminium and Multiply by the meter price 
            decimal metersPrice = (mirrorLength / 100m + mirrorHeight / 100m) * 2 * SupportModel.PerimetricalSupportMeterPrice;

            // If the found price is bigger than the minimum set it , otherwise set the minimum
            price = metersPrice >= SupportModel.PreimetricalSupportMinPrice ? metersPrice : SupportModel.PreimetricalSupportMinPrice;

            return price;
        }

        /// <summary>
        /// Returns the Pricing of the Painted Frame for a Set of Dimensions
        /// </summary>
        /// <param name="mirrorLength"></param>
        /// <param name="mirrorHeight"></param>
        /// <param name="paintFinish"></param>
        /// <returns>The Price of the Painted Frame</returns>
        public static decimal GetPaintedBlackRalFramePrice(int mirrorLength, int mirrorHeight, SupportPaintFinish? paintFinish)
        {
            decimal price;
            int pricingLength;
            int pricingHeight;

            //Modify the Set of Dimensions so that they come to the closest 10 && become a set that Exists in the Table
            (pricingLength, pricingHeight) = GetDimensionSetForPricing(mirrorLength, mirrorHeight, 10);

            //DEPRACATED (ADDED MORE DIMENSIONS)
            //if (pricingHeight > 180 && pricingHeight <= 190) //Pricing Tables Constraints
            //{
            //    pricingHeight = 180;
            //}
            //if (pricingLength > 90) // Cannot Make Dimensions of ex. 120x120 with Frame Currently
            //{
            //    price = 99999m;
            //}

            // Get Price of Black or Ral Finish from the Normal Table
            if (paintFinish is SupportPaintFinish.Black or SupportPaintFinish.RalColor)
            {
                price = FramesPaintedPriceTable[(pricingLength, pricingHeight)];
            }
            // Else Multiply the Price by the Extra Price Coefficient
            //else if (paintFinish != null)
            //{
            //    //Not Relevant any more
            //    price = FramesPaintedPriceTable[(pricingLength, pricingHeight)] * SupportModel.PaintExtraPriceCoefficient;
            //}
            else // when Null or not Black Ral (something is wrong)
            {
                price = 99999m;
            }
            return price;
        }

        /// <summary>
        /// Returns the Pricing of the Electroplated Frame for a Set of Dimensions
        /// </summary>
        /// <param name="mirrorLength">mirror Length</param>
        /// <param name="mirrorHeight">mirror Height</param>
        /// <param name="paintFinish">The Finish</param>
        /// <returns>The Price of the Electroplated Frame</returns>
        public static decimal GetSimilarElectroplatedFramePrice(int mirrorLength, int mirrorHeight, SupportPaintFinish? paintFinish)
        {
            decimal price;
            int pricingLength;
            int pricingHeight;

            //Modify the Set of Dimensions so that they come to the closest 10 && become a set that Exists in the Table
            (pricingLength, pricingHeight) = GetDimensionSetForPricing(mirrorLength, mirrorHeight, 10);

            //DEPRACATED (ADDED MORE DIMENSIONS)
            //if (pricingHeight > 180 && pricingHeight <= 190) //Pricing Tables Constraints
            //{
            //    pricingHeight = 180;
            //}
            //if (pricingLength > 90) // Cannot Make Dimensions of ex. 120x120 with Frame Currently
            //{
            //    price = 99999m;
            //}

            // for all the finishes except Black and Ral
            if (paintFinish is not null and not
                SupportPaintFinish.Black and not
                SupportPaintFinish.RalColor)
            {
                price = FramesPlatedPriceTable[(pricingLength, pricingHeight)];
            }
            else
            {
                price = 99999m;
            }

            return price;
            //DEPECATED DEPECATED DEPECATED DEPECATED DEPECATED DEPECATED DEPECATED DEPECATED DEPECATED 
            //else if (paintFinish is SupportElectroplatedFinish.RealGoldMirror or SupportElectroplatedFinish.RealGoldBrushed)
            //{
            //    price = FramesPlatedPriceTable[(pricingLength, pricingHeight)] * SupportModel.ElectroplatedRealGoldCoefficient;
            //}
        }

        #endregion

        #region 4.Mirror Extension Methods
#nullable enable
        /// <summary>
        /// The Extras that when removed from a mirror trigger a Customized Dimension
        /// </summary>
        public static readonly IEnumerable<MirrorOption> NonRemovableExtras =
        [
            MirrorOption.TouchSwitchFog,
            MirrorOption.Fog16W,
            MirrorOption.Fog24W,
            MirrorOption.Fog55W,
            MirrorOption.Zoom,
            MirrorOption.ZoomLed,
            MirrorOption.ZoomLedTouch,
            MirrorOption.Clock,
            MirrorOption.BlueTooth,
            MirrorOption.DisplayRadio,
            MirrorOption.Display20,
            MirrorOption.Display19,
            MirrorOption.IPLid,
            MirrorOption.RoundedCorners,

            MirrorOption.BackLightSealedChannel,
            MirrorOption.FrontLightSealedChannel,
            MirrorOption.DoubleTopBottomLightedPlexiglass,
            MirrorOption.SingleTopLightedPlexiglass,
            MirrorOption.DisplayRadioBlack,

            MirrorOption.LightAluminumChannel,
        ];

        /// <summary>
        /// Returns the Equivalent Catalogue Mirror or Null if there is Not One
        /// </summary>
        /// <returns>The Equivalent Catalogue Mirror of the Current Mirror -- Null if there is not one</returns>
        public static Mirror? GetEquivalentCatalogueMirror(this Mirror? mirror)
        {

            if (mirror is null) return null;

            //If the Mirror Does not have a button and it has light => it most certainly is a Customized Mirror
            if (mirror.HasLight() && mirror.HasNotAny(MirrorOption.TouchSwitch, MirrorOption.DimmerSwitch, MirrorOption.SensorSwitch)) return null;


            //First find the Mirrors with the Same Shape-Dimension-Sandblast-Support 
            //Then Check for the Rest :
            var mirrorCanditates = CatalogueMirrors.Where(m =>
            m.Shape == mirror.Shape
            && m.Sandblast == mirror.Sandblast
            && m.Support.Code == mirror.Support.Code
            && m.Length == mirror.Length
            && m.Height == mirror.Height
            && m.Diameter == mirror.Diameter).ToList();

            //Return nothing if there where no Canditates
            if (mirrorCanditates.Count == 0) return null;

            //Check weather the mirror has no light . If it has no Light then keep ONLY the Catalog Mirrors without Light
            if(mirror.Lighting?.Light is null or MirrorLight.WithoutLight)
            {
                mirrorCanditates = [.. mirrorCanditates.Where(m => m.Lighting.Light == MirrorLight.WithoutLight)];
                //Return nothing if there where no Canditates
                if (mirrorCanditates.Count == 0) return null;
            }

            //If there are canditates it means we have found mirrors that are almost equal and might only differ in the extras

            //The Rules are :
            //1. If the Mirror has Rounded Corners and there are no Mirrors with Rounded Corners , then it is a Customized Mirror
            //2. If the Mirror has Not Rounded Corners and there are Mirrors with Rounded Corners , then it is a Customized Mirror
            if (mirror.HasExtra(MirrorOption.RoundedCorners))
            {
                mirrorCanditates = [.. mirrorCanditates.Where(m => m.HasExtra(MirrorOption.RoundedCorners))];
            }
            else
            {
                mirrorCanditates = [.. mirrorCanditates.Where(m => m.HasNotAny(MirrorOption.RoundedCorners))];
            }

            //Check weather the List is empty now 
            if (mirrorCanditates.Count == 0) return null;

            //2. If the Catalogue Mirrors have a button , then it can be changed so as long as there is a button on the mirror
            //it is considered a catalogue mirror but maybe with a different button
            //3. At this point if the Mirror Has Light it also has a Button (checked at the begining of the Method)

            //4.Any other Option that is present in the Catalogue Mirrors but not in the Mirror itself it will make the Mirror a Customized Dimension
            //As Clocks - Radios - Fog - Fog Switches cannot be Removed from the Mirror
            //5. This is not the case though for the reverse hypothesis , if the Mirror has an Option that is not in the Catalogue Mirror it does not make it Customized

            //So we eliminate from the Canditates one by one the Options that exists in the Catalogue but NOT in the mirror
            //Those extras that cannot be removed from a Catalogue Mirror

            //First check if the mirror already has any of those extras and deduct them from the searching list (because if it has them , even if the canditate does not have it , it will just be added to it with extra price)
            var nonRemovablesNotPresentInTheMirror = NonRemovableExtras.Except(mirror.Extras.Select(e=> e.Option)).ToList(); // These are the extras that cannot be removed from a mirror , but are not present in the current mirror

            //Now we remove from the Canditates the Mirrors that have a non removable Extra that is not already present in the mirror
            mirrorCanditates = [.. mirrorCanditates.Where(m => m.HasNotAny([.. nonRemovablesNotPresentInTheMirror]))];

            if (mirrorCanditates.Count == 0  || mirrorCanditates.Count == 1) return mirrorCanditates.FirstOrDefault();


            //By this point we will have narrowed the List to Catalogue Mirrors that have Equal or Less NonRemovable Extras as the Mirror
            //Depending on the Available Codes per Dimension in the Catalogue we might certainly have more than one Canditate Mirror
            //And we will have to pick the one that has the most Extras in Common with the Mirror

            //First find the Non Removables Present in the Mirror
            var nonRemovablesPresentInTheMirror = NonRemovableExtras.Intersect(mirror.Extras.Select(e => e.Option)).ToList();
            //Then pick the Mirror from the canditates that has the biggest count of extras when its own extras intersect with those of the Mirror
            //Favouring the Mirrors with more expensive materials
            //Favouring the same Light
            //Favouring the same touch
            var bestCanditate = mirrorCanditates.OrderByDescending(m => m.Extras.Select(e=>e.Option).Intersect(nonRemovablesPresentInTheMirror).Count())
                .ThenByDescending(m=> m.HasExtra(MirrorOption.ZoomLedTouch))
                .ThenByDescending(m => m.HasExtra(MirrorOption.ZoomLed))
                .ThenByDescending(m => m.HasExtra(MirrorOption.Zoom))
                .ThenByDescending(m => m.HasExtra(MirrorOption.Clock))
                .ThenByDescending(m => m.HasExtra(MirrorOption.DisplayRadio))
                .ThenByDescending(m => m.HasExtra(MirrorOption.DimmerSwitch) && mirror.HasExtra(MirrorOption.DimmerSwitch))
                .ThenByDescending(m => m.HasExtra(MirrorOption.SensorSwitch) && mirror.HasExtra(MirrorOption.SensorSwitch))
                .ThenByDescending(m => m.Lighting.Light == mirror.Lighting.Light).FirstOrDefault();
            return bestCanditate;
        }

        /// <summary>
        /// Checks if the Mirror matches a model in the Catalogue if not Retuirns False
        /// </summary>
        /// <returns></returns>
        public static bool IsFromCatalogue(this Mirror mirror)
        {
            bool isFromCatalogue = mirror.GetEquivalentCatalogueMirror() is not null;

            return isFromCatalogue;
        }

        /// <summary>
        /// Sets the Mirror Series -- If the Mirror is In The Catalogue -- OtherWise it sets as Custom
        /// </summary>
        public static void SetSeries(this Mirror mirror)
        {
            Mirror? equivMirror = mirror.GetEquivalentCatalogueMirror();

            if (equivMirror != null)
            {
                mirror.Series = equivMirror.Series;
            }
            else if (mirror.Lighting?.Light is not MirrorLight.WithoutLight)
            {
                //Mirrors with Light:
                switch (mirror.Shape)
                {
                    case MirrorShape.Rectangular:
                        mirror.Series = MirrorSeries.IM;
                        break;
                    case MirrorShape.Circular:
                        mirror.Series = MirrorSeries.N9Custom;
                        break;
                    case MirrorShape.Capsule:
                        mirror.Series = MirrorSeries.NCCustom;
                        break;
                    case MirrorShape.Ellipse:
                        mirror.Series = MirrorSeries.NLCustom;
                        break;
                    case MirrorShape.StoneNS:
                    case MirrorShape.PebbleND:
                    case MirrorShape.CircleSegment:
                    case MirrorShape.CircleSegment2:
                    case MirrorShape.Special:
                    case null:
                    default:
                        mirror.Series = MirrorSeries.Custom;
                        break;
                }
            }
            else
            {
                //Mirrors without Light:
                switch (mirror.Shape)
                {
                    case MirrorShape.Rectangular:
                        mirror.Series = MirrorSeries.IA;
                        break;
                    case MirrorShape.Circular:
                        mirror.Series = MirrorSeries.NA;
                        break;
                    case MirrorShape.Capsule:
                        mirror.Series = MirrorSeries.IC;
                        break;
                    case MirrorShape.Ellipse:
                        mirror.Series = MirrorSeries.IL;
                        break;
                    case MirrorShape.StoneNS:
                    case MirrorShape.PebbleND:
                    case MirrorShape.CircleSegment:
                    case MirrorShape.CircleSegment2:
                    case MirrorShape.Special:
                    case null:
                    default:
                        mirror.Series = MirrorSeries.Custom;
                        break;
                }
            }
        }

        /// <summary>
        /// Sets the Catalogue Code -- If the Mirror is Not from the Catalogue it Sets the Custom Mirrors Code
        /// </summary>
        public static void SetCode(this Mirror mirror)
        {
            string code;
            Mirror? catMirror = mirror.GetEquivalentCatalogueMirror();

            //If the Equivalent Mirror Does not Exist get a Customized Code , Otherwise get the Code of the Equivalent Mirror
            code = catMirror is null ? GetCustomizedCode(mirror) : catMirror.Code;

            mirror.Code = code;
        }

        /// <summary>
        /// Returns the Code of the Customized Mirror
        /// </summary>
        /// <returns></returns>
        private static string GetCustomizedCode(this Mirror mirror)
        {
            StringBuilder builder = new();
            if (mirror.Lighting?.Light is not null and not MirrorLight.WithoutLight)
            {
                switch (mirror.Shape)
                {
                    case MirrorShape.Rectangular:
                        builder.Append("60IM");
                        break;
                    case MirrorShape.Circular:
                        builder.Append("60N9");
                        break;
                    case MirrorShape.Capsule:
                        builder.Append("60NC");
                        break;
                    case MirrorShape.Ellipse:
                        builder.Append("60NL");
                        break;
                    case MirrorShape.Special:
                        builder.Append("60SP");
                        break;
                    default:
                        builder.Append("----");
                        break;
                }
            }
            else if (mirror.Lighting?.Light is MirrorLight.WithoutLight)
            {
                switch (mirror.Shape)
                {
                    case MirrorShape.Rectangular:
                        builder.Append("60IA");
                        break;
                    case MirrorShape.Circular:
                        builder.Append("60NA");
                        break;
                    case MirrorShape.Capsule:
                        builder.Append("60IC");
                        break;
                    case MirrorShape.Ellipse:
                        builder.Append("60IL");
                        break;
                    case MirrorShape.Special:
                        builder.Append("60SP");
                        break;
                    default:
                        builder.Append("----");
                        break;
                }
            }
            else
            {
                builder.Append("----");
            }

            builder.Append('-');

            if (mirror.Shape is MirrorShape.Rectangular or MirrorShape.Capsule or MirrorShape.Ellipse)
            {
                builder.Append($"{mirror.Length}").Append('-').Append($"{mirror.Height}");
            }
            else if (mirror.Shape == MirrorShape.Circular)
            {
                builder.Append($"{mirror.Diameter}").Append('-').Append($"{mirror.Diameter}");
            }

            return builder.ToString();
        }

        #endregion

        /// <summary>
        /// Returns the Set of Dimensions that will define Pricing (Length,Height) 
        /// Height is always the Biggest as The pricing Tables Define Price at bigger Heights but not Bigger Lengths
        /// </summary>
        /// <param name="length">The First Dimension (Does not matter wheather its length or Height)</param>
        /// <param name="height">The Second Dimension (Does not matter wheather its length or Height)</param>
        /// <param name="roundToNearest">The nearest Integer to which to Round the Resulting Set (Ex. 5 will bring the Set Numbers to the Nearest 5 always rounding up</param>
        /// <returns>Tuple Returns 1st Length - 2nd Height</returns>
        private static (int, int) GetDimensionSetForPricing(int length, int height, int roundToNearest)
        {
            //Bring Height and Length to the Next 10cm Step
            int pricingHeight = Math.Max(length, height); // Get the Max to Height Becuase the Tables have max to That Dimension
            int pricingLength = Math.Min(length, height); // Get the Min to Length Because the tables have min to that Dimension

            //We have to cast roundToNearest to a decimal so that the division can produce a decimal number to round
            pricingLength = (int)(Math.Round(pricingLength / (decimal)roundToNearest, MidpointRounding.ToPositiveInfinity) * roundToNearest);
            pricingHeight = (int)(Math.Round(pricingHeight / (decimal)roundToNearest, MidpointRounding.ToPositiveInfinity) * roundToNearest);

            return (pricingLength, pricingHeight);
        }

    }
}
